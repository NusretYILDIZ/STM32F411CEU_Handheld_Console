
STM32 Handheld Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800458c  0800458c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004594  08004594  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800459c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096e0  20000024  080045c0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009704  080045c0  00029704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085ec  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8d  00000000  00000000  00028683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064e  00000000  00000000  0002ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179f7  00000000  00000000  0002b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd3e  00000000  00000000  00042cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091921  00000000  00000000  0004ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020b0  00000000  00000000  000e0334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e23e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004364 	.word	0x08004364

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08004364 	.word	0x08004364

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <draw_pixel>:
    0xfc80, 0xfc8a, 0xfc95, 0xfc9f, 0xfda0, 0xfdaa, 0xfdb5, 0xfdbf, 
    0xfec0, 0xfeca, 0xfed5, 0xfedf, 0xffe0, 0xffea, 0xfff5, 0xffff 
};

void draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
 80004de:	460b      	mov	r3, r1
 80004e0:	80bb      	strh	r3, [r7, #4]
 80004e2:	4613      	mov	r3, r2
 80004e4:	70fb      	strb	r3, [r7, #3]
	if(x < 0 || x >= DISPLAY_WIDTH || y < 0 || y >= DISPLAY_HEIGHT) return;
 80004e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db19      	blt.n	8000522 <draw_pixel+0x4e>
 80004ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	dc15      	bgt.n	8000522 <draw_pixel+0x4e>
 80004f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db11      	blt.n	8000522 <draw_pixel+0x4e>
 80004fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000502:	2b9f      	cmp	r3, #159	; 0x9f
 8000504:	dc0d      	bgt.n	8000522 <draw_pixel+0x4e>
	
	//vram[y * DISPLAY_WIDTH + x] = color;
	vram[x][y] = color;
 8000506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800050a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800050e:	4808      	ldr	r0, [pc, #32]	; (8000530 <draw_pixel+0x5c>)
 8000510:	4613      	mov	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	4413      	add	r3, r2
 8000516:	015b      	lsls	r3, r3, #5
 8000518:	4403      	add	r3, r0
 800051a:	440b      	add	r3, r1
 800051c:	78fa      	ldrb	r2, [r7, #3]
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e000      	b.n	8000524 <draw_pixel+0x50>
	if(x < 0 || x >= DISPLAY_WIDTH || y < 0 || y >= DISPLAY_HEIGHT) return;
 8000522:	bf00      	nop
}
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000040 	.word	0x20000040

08000534 <clear_screen>:
{
	memset(vram, color, sizeof(vram));
}

void clear_screen()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	memset(vram, 0, sizeof(vram));
 8000538:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800053c:	2100      	movs	r1, #0
 800053e:	4802      	ldr	r0, [pc, #8]	; (8000548 <clear_screen+0x14>)
 8000540:	f003 fee3 	bl	800430a <memset>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000040 	.word	0x20000040

0800054c <init_ili9486l>:
                                            --tft_pixels_left; \
                                        } \
                                    } while(0)

void init_ili9486l()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    // Clear all pins
    GPIOB->BSRR = 0xFFFF0000;
 8000550:	4ba7      	ldr	r3, [pc, #668]	; (80007f0 <init_ili9486l+0x2a4>)
 8000552:	4aa8      	ldr	r2, [pc, #672]	; (80007f4 <init_ili9486l+0x2a8>)
 8000554:	619a      	str	r2, [r3, #24]
    
    // Set Control Pins High
    CS_HI;
 8000556:	4ba8      	ldr	r3, [pc, #672]	; (80007f8 <init_ili9486l+0x2ac>)
 8000558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055c:	619a      	str	r2, [r3, #24]
    WR_HI;
 800055e:	4ba6      	ldr	r3, [pc, #664]	; (80007f8 <init_ili9486l+0x2ac>)
 8000560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000564:	619a      	str	r2, [r3, #24]
    RS_DAT;
 8000566:	4ba4      	ldr	r3, [pc, #656]	; (80007f8 <init_ili9486l+0x2ac>)
 8000568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800056c:	619a      	str	r2, [r3, #24]
    RST_HI;
 800056e:	4ba2      	ldr	r3, [pc, #648]	; (80007f8 <init_ili9486l+0x2ac>)
 8000570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000574:	619a      	str	r2, [r3, #24]
    
    // Hardware Reset
    RST_HI; HAL_Delay(5);
 8000576:	4ba0      	ldr	r3, [pc, #640]	; (80007f8 <init_ili9486l+0x2ac>)
 8000578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057c:	619a      	str	r2, [r3, #24]
 800057e:	2005      	movs	r0, #5
 8000580:	f001 fbc4 	bl	8001d0c <HAL_Delay>
    RST_LO; HAL_Delay(20);
 8000584:	4b9c      	ldr	r3, [pc, #624]	; (80007f8 <init_ili9486l+0x2ac>)
 8000586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800058a:	619a      	str	r2, [r3, #24]
 800058c:	2014      	movs	r0, #20
 800058e:	f001 fbbd 	bl	8001d0c <HAL_Delay>
    RST_HI; HAL_Delay(150);
 8000592:	4b99      	ldr	r3, [pc, #612]	; (80007f8 <init_ili9486l+0x2ac>)
 8000594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	2096      	movs	r0, #150	; 0x96
 800059c:	f001 fbb6 	bl	8001d0c <HAL_Delay>
    
    // Initialise Display
    tft_send_command(SWRESET);    HAL_Delay(120);
 80005a0:	4b95      	ldr	r3, [pc, #596]	; (80007f8 <init_ili9486l+0x2ac>)
 80005a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a6:	619a      	str	r2, [r3, #24]
 80005a8:	4b93      	ldr	r3, [pc, #588]	; (80007f8 <init_ili9486l+0x2ac>)
 80005aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005ae:	619a      	str	r2, [r3, #24]
 80005b0:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <init_ili9486l+0x2a4>)
 80005b2:	4a92      	ldr	r2, [pc, #584]	; (80007fc <init_ili9486l+0x2b0>)
 80005b4:	619a      	str	r2, [r3, #24]
 80005b6:	4b90      	ldr	r3, [pc, #576]	; (80007f8 <init_ili9486l+0x2ac>)
 80005b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005bc:	619a      	str	r2, [r3, #24]
 80005be:	4b8e      	ldr	r3, [pc, #568]	; (80007f8 <init_ili9486l+0x2ac>)
 80005c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005c4:	619a      	str	r2, [r3, #24]
 80005c6:	4b8c      	ldr	r3, [pc, #560]	; (80007f8 <init_ili9486l+0x2ac>)
 80005c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005cc:	619a      	str	r2, [r3, #24]
 80005ce:	4b8a      	ldr	r3, [pc, #552]	; (80007f8 <init_ili9486l+0x2ac>)
 80005d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d4:	619a      	str	r2, [r3, #24]
 80005d6:	4b88      	ldr	r3, [pc, #544]	; (80007f8 <init_ili9486l+0x2ac>)
 80005d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005dc:	619a      	str	r2, [r3, #24]
 80005de:	4b86      	ldr	r3, [pc, #536]	; (80007f8 <init_ili9486l+0x2ac>)
 80005e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e4:	619a      	str	r2, [r3, #24]
 80005e6:	4b84      	ldr	r3, [pc, #528]	; (80007f8 <init_ili9486l+0x2ac>)
 80005e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ec:	619a      	str	r2, [r3, #24]
 80005ee:	2078      	movs	r0, #120	; 0x78
 80005f0:	f001 fb8c 	bl	8001d0c <HAL_Delay>
    tft_send_command(SLPOUT);     HAL_Delay(120);
 80005f4:	4b80      	ldr	r3, [pc, #512]	; (80007f8 <init_ili9486l+0x2ac>)
 80005f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fa:	619a      	str	r2, [r3, #24]
 80005fc:	4b7e      	ldr	r3, [pc, #504]	; (80007f8 <init_ili9486l+0x2ac>)
 80005fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000602:	619a      	str	r2, [r3, #24]
 8000604:	4b7a      	ldr	r3, [pc, #488]	; (80007f0 <init_ili9486l+0x2a4>)
 8000606:	4a7e      	ldr	r2, [pc, #504]	; (8000800 <init_ili9486l+0x2b4>)
 8000608:	619a      	str	r2, [r3, #24]
 800060a:	4b7b      	ldr	r3, [pc, #492]	; (80007f8 <init_ili9486l+0x2ac>)
 800060c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000610:	619a      	str	r2, [r3, #24]
 8000612:	4b79      	ldr	r3, [pc, #484]	; (80007f8 <init_ili9486l+0x2ac>)
 8000614:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000618:	619a      	str	r2, [r3, #24]
 800061a:	4b77      	ldr	r3, [pc, #476]	; (80007f8 <init_ili9486l+0x2ac>)
 800061c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <init_ili9486l+0x2ac>)
 8000624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	4b73      	ldr	r3, [pc, #460]	; (80007f8 <init_ili9486l+0x2ac>)
 800062c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	4b71      	ldr	r3, [pc, #452]	; (80007f8 <init_ili9486l+0x2ac>)
 8000634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000638:	619a      	str	r2, [r3, #24]
 800063a:	4b6f      	ldr	r3, [pc, #444]	; (80007f8 <init_ili9486l+0x2ac>)
 800063c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000640:	619a      	str	r2, [r3, #24]
 8000642:	2078      	movs	r0, #120	; 0x78
 8000644:	f001 fb62 	bl	8001d0c <HAL_Delay>
    
    // Select 16-bit Color
    tft_send_command(COLMOD);
 8000648:	4b6b      	ldr	r3, [pc, #428]	; (80007f8 <init_ili9486l+0x2ac>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	619a      	str	r2, [r3, #24]
 8000650:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <init_ili9486l+0x2ac>)
 8000652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000656:	619a      	str	r2, [r3, #24]
 8000658:	4b65      	ldr	r3, [pc, #404]	; (80007f0 <init_ili9486l+0x2a4>)
 800065a:	4a6a      	ldr	r2, [pc, #424]	; (8000804 <init_ili9486l+0x2b8>)
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	4b66      	ldr	r3, [pc, #408]	; (80007f8 <init_ili9486l+0x2ac>)
 8000660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000664:	619a      	str	r2, [r3, #24]
 8000666:	4b64      	ldr	r3, [pc, #400]	; (80007f8 <init_ili9486l+0x2ac>)
 8000668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800066c:	619a      	str	r2, [r3, #24]
 800066e:	4b62      	ldr	r3, [pc, #392]	; (80007f8 <init_ili9486l+0x2ac>)
 8000670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000674:	619a      	str	r2, [r3, #24]
 8000676:	4b60      	ldr	r3, [pc, #384]	; (80007f8 <init_ili9486l+0x2ac>)
 8000678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	4b5e      	ldr	r3, [pc, #376]	; (80007f8 <init_ili9486l+0x2ac>)
 8000680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000684:	619a      	str	r2, [r3, #24]
 8000686:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <init_ili9486l+0x2ac>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	619a      	str	r2, [r3, #24]
 800068e:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <init_ili9486l+0x2ac>)
 8000690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000694:	619a      	str	r2, [r3, #24]
    tft_send_data(0x55);
 8000696:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <init_ili9486l+0x2ac>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	619a      	str	r2, [r3, #24]
 800069e:	4b54      	ldr	r3, [pc, #336]	; (80007f0 <init_ili9486l+0x2a4>)
 80006a0:	4a59      	ldr	r2, [pc, #356]	; (8000808 <init_ili9486l+0x2bc>)
 80006a2:	619a      	str	r2, [r3, #24]
 80006a4:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <init_ili9486l+0x2ac>)
 80006a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006aa:	619a      	str	r2, [r3, #24]
 80006ac:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <init_ili9486l+0x2ac>)
 80006ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	4b50      	ldr	r3, [pc, #320]	; (80007f8 <init_ili9486l+0x2ac>)
 80006b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006ba:	619a      	str	r2, [r3, #24]
 80006bc:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <init_ili9486l+0x2ac>)
 80006be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c2:	619a      	str	r2, [r3, #24]
 80006c4:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <init_ili9486l+0x2ac>)
 80006c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <init_ili9486l+0x2ac>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	619a      	str	r2, [r3, #24]
    
    // Step-up Cycle For Step-up Circuit 1/4/5 = 2 H
    // Step-up Cycle For Step-up Circuit 2/3   = 8 H
    tft_send_command(PWCTRL3);
 80006d4:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <init_ili9486l+0x2ac>)
 80006d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006da:	619a      	str	r2, [r3, #24]
 80006dc:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <init_ili9486l+0x2ac>)
 80006de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006e2:	619a      	str	r2, [r3, #24]
 80006e4:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <init_ili9486l+0x2a4>)
 80006e6:	4a49      	ldr	r2, [pc, #292]	; (800080c <init_ili9486l+0x2c0>)
 80006e8:	619a      	str	r2, [r3, #24]
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <init_ili9486l+0x2ac>)
 80006ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006f0:	619a      	str	r2, [r3, #24]
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <init_ili9486l+0x2ac>)
 80006f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006f8:	619a      	str	r2, [r3, #24]
 80006fa:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <init_ili9486l+0x2ac>)
 80006fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <init_ili9486l+0x2ac>)
 8000704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000708:	619a      	str	r2, [r3, #24]
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <init_ili9486l+0x2ac>)
 800070c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <init_ili9486l+0x2ac>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <init_ili9486l+0x2ac>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	619a      	str	r2, [r3, #24]
    tft_send_data(0x44);
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <init_ili9486l+0x2ac>)
 8000724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <init_ili9486l+0x2a4>)
 800072c:	4a38      	ldr	r2, [pc, #224]	; (8000810 <init_ili9486l+0x2c4>)
 800072e:	619a      	str	r2, [r3, #24]
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <init_ili9486l+0x2ac>)
 8000732:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000736:	619a      	str	r2, [r3, #24]
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <init_ili9486l+0x2ac>)
 800073a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800073e:	619a      	str	r2, [r3, #24]
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <init_ili9486l+0x2ac>)
 8000742:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000746:	619a      	str	r2, [r3, #24]
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <init_ili9486l+0x2ac>)
 800074a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <init_ili9486l+0x2ac>)
 8000752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000756:	619a      	str	r2, [r3, #24]
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <init_ili9486l+0x2ac>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	619a      	str	r2, [r3, #24]
    
    // (whatever are these)
    tft_send_command(VMCTRL);
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <init_ili9486l+0x2ac>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	619a      	str	r2, [r3, #24]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <init_ili9486l+0x2ac>)
 800076a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800076e:	619a      	str	r2, [r3, #24]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <init_ili9486l+0x2a4>)
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <init_ili9486l+0x2c8>)
 8000774:	619a      	str	r2, [r3, #24]
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <init_ili9486l+0x2ac>)
 8000778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800077c:	619a      	str	r2, [r3, #24]
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <init_ili9486l+0x2ac>)
 8000780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000784:	619a      	str	r2, [r3, #24]
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <init_ili9486l+0x2ac>)
 8000788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800078c:	619a      	str	r2, [r3, #24]
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <init_ili9486l+0x2ac>)
 8000790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000794:	619a      	str	r2, [r3, #24]
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <init_ili9486l+0x2ac>)
 8000798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079c:	619a      	str	r2, [r3, #24]
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <init_ili9486l+0x2ac>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	619a      	str	r2, [r3, #24]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <init_ili9486l+0x2ac>)
 80007a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ac:	619a      	str	r2, [r3, #24]
    tft_send_data(0x00);
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <init_ili9486l+0x2ac>)
 80007b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <init_ili9486l+0x2a4>)
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <init_ili9486l+0x2a8>)
 80007ba:	619a      	str	r2, [r3, #24]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <init_ili9486l+0x2ac>)
 80007be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007c2:	619a      	str	r2, [r3, #24]
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <init_ili9486l+0x2ac>)
 80007c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <init_ili9486l+0x2ac>)
 80007ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007d2:	619a      	str	r2, [r3, #24]
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <init_ili9486l+0x2ac>)
 80007d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007da:	619a      	str	r2, [r3, #24]
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <init_ili9486l+0x2ac>)
 80007de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <init_ili9486l+0x2ac>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	619a      	str	r2, [r3, #24]
 80007ec:	e014      	b.n	8000818 <init_ili9486l+0x2cc>
 80007ee:	bf00      	nop
 80007f0:	40020400 	.word	0x40020400
 80007f4:	ffff0000 	.word	0xffff0000
 80007f8:	40020000 	.word	0x40020000
 80007fc:	ffff0001 	.word	0xffff0001
 8000800:	ffff0011 	.word	0xffff0011
 8000804:	ffff003a 	.word	0xffff003a
 8000808:	ffff0055 	.word	0xffff0055
 800080c:	ffff00c2 	.word	0xffff00c2
 8000810:	ffff0044 	.word	0xffff0044
 8000814:	ffff00c5 	.word	0xffff00c5
    tft_send_data(0x00);
 8000818:	4ba4      	ldr	r3, [pc, #656]	; (8000aac <init_ili9486l+0x560>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	619a      	str	r2, [r3, #24]
 8000820:	4ba3      	ldr	r3, [pc, #652]	; (8000ab0 <init_ili9486l+0x564>)
 8000822:	4aa4      	ldr	r2, [pc, #656]	; (8000ab4 <init_ili9486l+0x568>)
 8000824:	619a      	str	r2, [r3, #24]
 8000826:	4ba1      	ldr	r3, [pc, #644]	; (8000aac <init_ili9486l+0x560>)
 8000828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800082c:	619a      	str	r2, [r3, #24]
 800082e:	4b9f      	ldr	r3, [pc, #636]	; (8000aac <init_ili9486l+0x560>)
 8000830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000834:	619a      	str	r2, [r3, #24]
 8000836:	4b9d      	ldr	r3, [pc, #628]	; (8000aac <init_ili9486l+0x560>)
 8000838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800083c:	619a      	str	r2, [r3, #24]
 800083e:	4b9b      	ldr	r3, [pc, #620]	; (8000aac <init_ili9486l+0x560>)
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	619a      	str	r2, [r3, #24]
 8000846:	4b99      	ldr	r3, [pc, #612]	; (8000aac <init_ili9486l+0x560>)
 8000848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084c:	619a      	str	r2, [r3, #24]
 800084e:	4b97      	ldr	r3, [pc, #604]	; (8000aac <init_ili9486l+0x560>)
 8000850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000854:	619a      	str	r2, [r3, #24]
    tft_send_data(0x00);
 8000856:	4b95      	ldr	r3, [pc, #596]	; (8000aac <init_ili9486l+0x560>)
 8000858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085c:	619a      	str	r2, [r3, #24]
 800085e:	4b94      	ldr	r3, [pc, #592]	; (8000ab0 <init_ili9486l+0x564>)
 8000860:	4a94      	ldr	r2, [pc, #592]	; (8000ab4 <init_ili9486l+0x568>)
 8000862:	619a      	str	r2, [r3, #24]
 8000864:	4b91      	ldr	r3, [pc, #580]	; (8000aac <init_ili9486l+0x560>)
 8000866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800086a:	619a      	str	r2, [r3, #24]
 800086c:	4b8f      	ldr	r3, [pc, #572]	; (8000aac <init_ili9486l+0x560>)
 800086e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000872:	619a      	str	r2, [r3, #24]
 8000874:	4b8d      	ldr	r3, [pc, #564]	; (8000aac <init_ili9486l+0x560>)
 8000876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800087a:	619a      	str	r2, [r3, #24]
 800087c:	4b8b      	ldr	r3, [pc, #556]	; (8000aac <init_ili9486l+0x560>)
 800087e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000882:	619a      	str	r2, [r3, #24]
 8000884:	4b89      	ldr	r3, [pc, #548]	; (8000aac <init_ili9486l+0x560>)
 8000886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088a:	619a      	str	r2, [r3, #24]
 800088c:	4b87      	ldr	r3, [pc, #540]	; (8000aac <init_ili9486l+0x560>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	619a      	str	r2, [r3, #24]
    tft_send_data(0x00);
 8000894:	4b85      	ldr	r3, [pc, #532]	; (8000aac <init_ili9486l+0x560>)
 8000896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089a:	619a      	str	r2, [r3, #24]
 800089c:	4b84      	ldr	r3, [pc, #528]	; (8000ab0 <init_ili9486l+0x564>)
 800089e:	4a85      	ldr	r2, [pc, #532]	; (8000ab4 <init_ili9486l+0x568>)
 80008a0:	619a      	str	r2, [r3, #24]
 80008a2:	4b82      	ldr	r3, [pc, #520]	; (8000aac <init_ili9486l+0x560>)
 80008a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008a8:	619a      	str	r2, [r3, #24]
 80008aa:	4b80      	ldr	r3, [pc, #512]	; (8000aac <init_ili9486l+0x560>)
 80008ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008b0:	619a      	str	r2, [r3, #24]
 80008b2:	4b7e      	ldr	r3, [pc, #504]	; (8000aac <init_ili9486l+0x560>)
 80008b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008b8:	619a      	str	r2, [r3, #24]
 80008ba:	4b7c      	ldr	r3, [pc, #496]	; (8000aac <init_ili9486l+0x560>)
 80008bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c0:	619a      	str	r2, [r3, #24]
 80008c2:	4b7a      	ldr	r3, [pc, #488]	; (8000aac <init_ili9486l+0x560>)
 80008c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c8:	619a      	str	r2, [r3, #24]
 80008ca:	4b78      	ldr	r3, [pc, #480]	; (8000aac <init_ili9486l+0x560>)
 80008cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d0:	619a      	str	r2, [r3, #24]
    
    tft_send_command(PGAMCTRL);
 80008d2:	4b76      	ldr	r3, [pc, #472]	; (8000aac <init_ili9486l+0x560>)
 80008d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d8:	619a      	str	r2, [r3, #24]
 80008da:	4b74      	ldr	r3, [pc, #464]	; (8000aac <init_ili9486l+0x560>)
 80008dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008e0:	619a      	str	r2, [r3, #24]
 80008e2:	4b73      	ldr	r3, [pc, #460]	; (8000ab0 <init_ili9486l+0x564>)
 80008e4:	4a74      	ldr	r2, [pc, #464]	; (8000ab8 <init_ili9486l+0x56c>)
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	4b70      	ldr	r3, [pc, #448]	; (8000aac <init_ili9486l+0x560>)
 80008ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008ee:	619a      	str	r2, [r3, #24]
 80008f0:	4b6e      	ldr	r3, [pc, #440]	; (8000aac <init_ili9486l+0x560>)
 80008f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008f6:	619a      	str	r2, [r3, #24]
 80008f8:	4b6c      	ldr	r3, [pc, #432]	; (8000aac <init_ili9486l+0x560>)
 80008fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b6a      	ldr	r3, [pc, #424]	; (8000aac <init_ili9486l+0x560>)
 8000902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000906:	619a      	str	r2, [r3, #24]
 8000908:	4b68      	ldr	r3, [pc, #416]	; (8000aac <init_ili9486l+0x560>)
 800090a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090e:	619a      	str	r2, [r3, #24]
 8000910:	4b66      	ldr	r3, [pc, #408]	; (8000aac <init_ili9486l+0x560>)
 8000912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000916:	619a      	str	r2, [r3, #24]
 8000918:	4b64      	ldr	r3, [pc, #400]	; (8000aac <init_ili9486l+0x560>)
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0F);
 8000920:	4b62      	ldr	r3, [pc, #392]	; (8000aac <init_ili9486l+0x560>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000926:	619a      	str	r2, [r3, #24]
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <init_ili9486l+0x564>)
 800092a:	4a64      	ldr	r2, [pc, #400]	; (8000abc <init_ili9486l+0x570>)
 800092c:	619a      	str	r2, [r3, #24]
 800092e:	4b5f      	ldr	r3, [pc, #380]	; (8000aac <init_ili9486l+0x560>)
 8000930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000934:	619a      	str	r2, [r3, #24]
 8000936:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <init_ili9486l+0x560>)
 8000938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800093c:	619a      	str	r2, [r3, #24]
 800093e:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <init_ili9486l+0x560>)
 8000940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000944:	619a      	str	r2, [r3, #24]
 8000946:	4b59      	ldr	r3, [pc, #356]	; (8000aac <init_ili9486l+0x560>)
 8000948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094c:	619a      	str	r2, [r3, #24]
 800094e:	4b57      	ldr	r3, [pc, #348]	; (8000aac <init_ili9486l+0x560>)
 8000950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	4b55      	ldr	r3, [pc, #340]	; (8000aac <init_ili9486l+0x560>)
 8000958:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095c:	619a      	str	r2, [r3, #24]
    tft_send_data(0x1F);
 800095e:	4b53      	ldr	r3, [pc, #332]	; (8000aac <init_ili9486l+0x560>)
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	619a      	str	r2, [r3, #24]
 8000966:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <init_ili9486l+0x564>)
 8000968:	4a55      	ldr	r2, [pc, #340]	; (8000ac0 <init_ili9486l+0x574>)
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <init_ili9486l+0x560>)
 800096e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <init_ili9486l+0x560>)
 8000976:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800097a:	619a      	str	r2, [r3, #24]
 800097c:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <init_ili9486l+0x560>)
 800097e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000982:	619a      	str	r2, [r3, #24]
 8000984:	4b49      	ldr	r3, [pc, #292]	; (8000aac <init_ili9486l+0x560>)
 8000986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098a:	619a      	str	r2, [r3, #24]
 800098c:	4b47      	ldr	r3, [pc, #284]	; (8000aac <init_ili9486l+0x560>)
 800098e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b45      	ldr	r3, [pc, #276]	; (8000aac <init_ili9486l+0x560>)
 8000996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099a:	619a      	str	r2, [r3, #24]
    tft_send_data(0x1C);
 800099c:	4b43      	ldr	r3, [pc, #268]	; (8000aac <init_ili9486l+0x560>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <init_ili9486l+0x564>)
 80009a6:	4a47      	ldr	r2, [pc, #284]	; (8000ac4 <init_ili9486l+0x578>)
 80009a8:	619a      	str	r2, [r3, #24]
 80009aa:	4b40      	ldr	r3, [pc, #256]	; (8000aac <init_ili9486l+0x560>)
 80009ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009b0:	619a      	str	r2, [r3, #24]
 80009b2:	4b3e      	ldr	r3, [pc, #248]	; (8000aac <init_ili9486l+0x560>)
 80009b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <init_ili9486l+0x560>)
 80009bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009c0:	619a      	str	r2, [r3, #24]
 80009c2:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <init_ili9486l+0x560>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <init_ili9486l+0x560>)
 80009cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d0:	619a      	str	r2, [r3, #24]
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <init_ili9486l+0x560>)
 80009d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d8:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0C);
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <init_ili9486l+0x560>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	619a      	str	r2, [r3, #24]
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <init_ili9486l+0x564>)
 80009e4:	4a38      	ldr	r2, [pc, #224]	; (8000ac8 <init_ili9486l+0x57c>)
 80009e6:	619a      	str	r2, [r3, #24]
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <init_ili9486l+0x560>)
 80009ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009ee:	619a      	str	r2, [r3, #24]
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <init_ili9486l+0x560>)
 80009f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009f6:	619a      	str	r2, [r3, #24]
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <init_ili9486l+0x560>)
 80009fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <init_ili9486l+0x560>)
 8000a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <init_ili9486l+0x560>)
 8000a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a0e:	619a      	str	r2, [r3, #24]
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <init_ili9486l+0x560>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0F);
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <init_ili9486l+0x560>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1e:	619a      	str	r2, [r3, #24]
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <init_ili9486l+0x564>)
 8000a22:	4a26      	ldr	r2, [pc, #152]	; (8000abc <init_ili9486l+0x570>)
 8000a24:	619a      	str	r2, [r3, #24]
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <init_ili9486l+0x560>)
 8000a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a2c:	619a      	str	r2, [r3, #24]
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <init_ili9486l+0x560>)
 8000a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a34:	619a      	str	r2, [r3, #24]
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <init_ili9486l+0x560>)
 8000a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a3c:	619a      	str	r2, [r3, #24]
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <init_ili9486l+0x560>)
 8000a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a44:	619a      	str	r2, [r3, #24]
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <init_ili9486l+0x560>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	619a      	str	r2, [r3, #24]
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <init_ili9486l+0x560>)
 8000a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a54:	619a      	str	r2, [r3, #24]
    tft_send_data(0x08);
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <init_ili9486l+0x560>)
 8000a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5c:	619a      	str	r2, [r3, #24]
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <init_ili9486l+0x564>)
 8000a60:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <init_ili9486l+0x580>)
 8000a62:	619a      	str	r2, [r3, #24]
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <init_ili9486l+0x560>)
 8000a66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <init_ili9486l+0x560>)
 8000a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a72:	619a      	str	r2, [r3, #24]
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <init_ili9486l+0x560>)
 8000a76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a7a:	619a      	str	r2, [r3, #24]
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <init_ili9486l+0x560>)
 8000a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <init_ili9486l+0x560>)
 8000a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a8a:	619a      	str	r2, [r3, #24]
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <init_ili9486l+0x560>)
 8000a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a92:	619a      	str	r2, [r3, #24]
    tft_send_data(0x48);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <init_ili9486l+0x560>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9a:	619a      	str	r2, [r3, #24]
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <init_ili9486l+0x564>)
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <init_ili9486l+0x584>)
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	4b02      	ldr	r3, [pc, #8]	; (8000aac <init_ili9486l+0x560>)
 8000aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000aa8:	e014      	b.n	8000ad4 <init_ili9486l+0x588>
 8000aaa:	bf00      	nop
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	ffff0000 	.word	0xffff0000
 8000ab8:	ffff00e0 	.word	0xffff00e0
 8000abc:	ffff000f 	.word	0xffff000f
 8000ac0:	ffff001f 	.word	0xffff001f
 8000ac4:	ffff001c 	.word	0xffff001c
 8000ac8:	ffff000c 	.word	0xffff000c
 8000acc:	ffff0008 	.word	0xffff0008
 8000ad0:	ffff0048 	.word	0xffff0048
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	4ba5      	ldr	r3, [pc, #660]	; (8000d6c <init_ili9486l+0x820>)
 8000ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000adc:	619a      	str	r2, [r3, #24]
 8000ade:	4ba3      	ldr	r3, [pc, #652]	; (8000d6c <init_ili9486l+0x820>)
 8000ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ae4:	619a      	str	r2, [r3, #24]
 8000ae6:	4ba1      	ldr	r3, [pc, #644]	; (8000d6c <init_ili9486l+0x820>)
 8000ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aec:	619a      	str	r2, [r3, #24]
 8000aee:	4b9f      	ldr	r3, [pc, #636]	; (8000d6c <init_ili9486l+0x820>)
 8000af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af4:	619a      	str	r2, [r3, #24]
 8000af6:	4b9d      	ldr	r3, [pc, #628]	; (8000d6c <init_ili9486l+0x820>)
 8000af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afc:	619a      	str	r2, [r3, #24]
    tft_send_data(0x98);
 8000afe:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <init_ili9486l+0x820>)
 8000b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b04:	619a      	str	r2, [r3, #24]
 8000b06:	4b9a      	ldr	r3, [pc, #616]	; (8000d70 <init_ili9486l+0x824>)
 8000b08:	4a9a      	ldr	r2, [pc, #616]	; (8000d74 <init_ili9486l+0x828>)
 8000b0a:	619a      	str	r2, [r3, #24]
 8000b0c:	4b97      	ldr	r3, [pc, #604]	; (8000d6c <init_ili9486l+0x820>)
 8000b0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b12:	619a      	str	r2, [r3, #24]
 8000b14:	4b95      	ldr	r3, [pc, #596]	; (8000d6c <init_ili9486l+0x820>)
 8000b16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b93      	ldr	r3, [pc, #588]	; (8000d6c <init_ili9486l+0x820>)
 8000b1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b22:	619a      	str	r2, [r3, #24]
 8000b24:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <init_ili9486l+0x820>)
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	619a      	str	r2, [r3, #24]
 8000b2c:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <init_ili9486l+0x820>)
 8000b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b32:	619a      	str	r2, [r3, #24]
 8000b34:	4b8d      	ldr	r3, [pc, #564]	; (8000d6c <init_ili9486l+0x820>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	619a      	str	r2, [r3, #24]
    tft_send_data(0x37);
 8000b3c:	4b8b      	ldr	r3, [pc, #556]	; (8000d6c <init_ili9486l+0x820>)
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b42:	619a      	str	r2, [r3, #24]
 8000b44:	4b8a      	ldr	r3, [pc, #552]	; (8000d70 <init_ili9486l+0x824>)
 8000b46:	4a8c      	ldr	r2, [pc, #560]	; (8000d78 <init_ili9486l+0x82c>)
 8000b48:	619a      	str	r2, [r3, #24]
 8000b4a:	4b88      	ldr	r3, [pc, #544]	; (8000d6c <init_ili9486l+0x820>)
 8000b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <init_ili9486l+0x820>)
 8000b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b58:	619a      	str	r2, [r3, #24]
 8000b5a:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <init_ili9486l+0x820>)
 8000b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b60:	619a      	str	r2, [r3, #24]
 8000b62:	4b82      	ldr	r3, [pc, #520]	; (8000d6c <init_ili9486l+0x820>)
 8000b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b68:	619a      	str	r2, [r3, #24]
 8000b6a:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <init_ili9486l+0x820>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	619a      	str	r2, [r3, #24]
 8000b72:	4b7e      	ldr	r3, [pc, #504]	; (8000d6c <init_ili9486l+0x820>)
 8000b74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b78:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0A);
 8000b7a:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <init_ili9486l+0x820>)
 8000b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <init_ili9486l+0x824>)
 8000b84:	4a7d      	ldr	r2, [pc, #500]	; (8000d7c <init_ili9486l+0x830>)
 8000b86:	619a      	str	r2, [r3, #24]
 8000b88:	4b78      	ldr	r3, [pc, #480]	; (8000d6c <init_ili9486l+0x820>)
 8000b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <init_ili9486l+0x820>)
 8000b92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	4b74      	ldr	r3, [pc, #464]	; (8000d6c <init_ili9486l+0x820>)
 8000b9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b9e:	619a      	str	r2, [r3, #24]
 8000ba0:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <init_ili9486l+0x820>)
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	619a      	str	r2, [r3, #24]
 8000ba8:	4b70      	ldr	r3, [pc, #448]	; (8000d6c <init_ili9486l+0x820>)
 8000baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bae:	619a      	str	r2, [r3, #24]
 8000bb0:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <init_ili9486l+0x820>)
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	619a      	str	r2, [r3, #24]
    tft_send_data(0x13);
 8000bb8:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <init_ili9486l+0x820>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	619a      	str	r2, [r3, #24]
 8000bc0:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <init_ili9486l+0x824>)
 8000bc2:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <init_ili9486l+0x834>)
 8000bc4:	619a      	str	r2, [r3, #24]
 8000bc6:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <init_ili9486l+0x820>)
 8000bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bcc:	619a      	str	r2, [r3, #24]
 8000bce:	4b67      	ldr	r3, [pc, #412]	; (8000d6c <init_ili9486l+0x820>)
 8000bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bd4:	619a      	str	r2, [r3, #24]
 8000bd6:	4b65      	ldr	r3, [pc, #404]	; (8000d6c <init_ili9486l+0x820>)
 8000bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bdc:	619a      	str	r2, [r3, #24]
 8000bde:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <init_ili9486l+0x820>)
 8000be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be4:	619a      	str	r2, [r3, #24]
 8000be6:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <init_ili9486l+0x820>)
 8000be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bec:	619a      	str	r2, [r3, #24]
 8000bee:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <init_ili9486l+0x820>)
 8000bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf4:	619a      	str	r2, [r3, #24]
    tft_send_data(0x04);
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <init_ili9486l+0x820>)
 8000bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfc:	619a      	str	r2, [r3, #24]
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <init_ili9486l+0x824>)
 8000c00:	4a60      	ldr	r2, [pc, #384]	; (8000d84 <init_ili9486l+0x838>)
 8000c02:	619a      	str	r2, [r3, #24]
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <init_ili9486l+0x820>)
 8000c06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c0a:	619a      	str	r2, [r3, #24]
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <init_ili9486l+0x820>)
 8000c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c12:	619a      	str	r2, [r3, #24]
 8000c14:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <init_ili9486l+0x820>)
 8000c16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c1a:	619a      	str	r2, [r3, #24]
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <init_ili9486l+0x820>)
 8000c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c22:	619a      	str	r2, [r3, #24]
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <init_ili9486l+0x820>)
 8000c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2a:	619a      	str	r2, [r3, #24]
 8000c2c:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <init_ili9486l+0x820>)
 8000c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c32:	619a      	str	r2, [r3, #24]
    tft_send_data(0x11);
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <init_ili9486l+0x820>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3a:	619a      	str	r2, [r3, #24]
 8000c3c:	4b4c      	ldr	r3, [pc, #304]	; (8000d70 <init_ili9486l+0x824>)
 8000c3e:	4a52      	ldr	r2, [pc, #328]	; (8000d88 <init_ili9486l+0x83c>)
 8000c40:	619a      	str	r2, [r3, #24]
 8000c42:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <init_ili9486l+0x820>)
 8000c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c48:	619a      	str	r2, [r3, #24]
 8000c4a:	4b48      	ldr	r3, [pc, #288]	; (8000d6c <init_ili9486l+0x820>)
 8000c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <init_ili9486l+0x820>)
 8000c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	4b44      	ldr	r3, [pc, #272]	; (8000d6c <init_ili9486l+0x820>)
 8000c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c60:	619a      	str	r2, [r3, #24]
 8000c62:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <init_ili9486l+0x820>)
 8000c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c68:	619a      	str	r2, [r3, #24]
 8000c6a:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <init_ili9486l+0x820>)
 8000c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c70:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0D);
 8000c72:	4b3e      	ldr	r3, [pc, #248]	; (8000d6c <init_ili9486l+0x820>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	619a      	str	r2, [r3, #24]
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <init_ili9486l+0x824>)
 8000c7c:	4a43      	ldr	r2, [pc, #268]	; (8000d8c <init_ili9486l+0x840>)
 8000c7e:	619a      	str	r2, [r3, #24]
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <init_ili9486l+0x820>)
 8000c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <init_ili9486l+0x820>)
 8000c8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c8e:	619a      	str	r2, [r3, #24]
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <init_ili9486l+0x820>)
 8000c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <init_ili9486l+0x820>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	619a      	str	r2, [r3, #24]
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <init_ili9486l+0x820>)
 8000ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <init_ili9486l+0x820>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	619a      	str	r2, [r3, #24]
    tft_send_data(0x00);
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <init_ili9486l+0x820>)
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <init_ili9486l+0x824>)
 8000cba:	4a35      	ldr	r2, [pc, #212]	; (8000d90 <init_ili9486l+0x844>)
 8000cbc:	619a      	str	r2, [r3, #24]
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <init_ili9486l+0x820>)
 8000cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cc4:	619a      	str	r2, [r3, #24]
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <init_ili9486l+0x820>)
 8000cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ccc:	619a      	str	r2, [r3, #24]
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <init_ili9486l+0x820>)
 8000cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cd4:	619a      	str	r2, [r3, #24]
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <init_ili9486l+0x820>)
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <init_ili9486l+0x820>)
 8000ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce4:	619a      	str	r2, [r3, #24]
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <init_ili9486l+0x820>)
 8000ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cec:	619a      	str	r2, [r3, #24]
    
    tft_send_command(NGAMCTRL);
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <init_ili9486l+0x820>)
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf4:	619a      	str	r2, [r3, #24]
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <init_ili9486l+0x820>)
 8000cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cfc:	619a      	str	r2, [r3, #24]
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <init_ili9486l+0x824>)
 8000d00:	4a24      	ldr	r2, [pc, #144]	; (8000d94 <init_ili9486l+0x848>)
 8000d02:	619a      	str	r2, [r3, #24]
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <init_ili9486l+0x820>)
 8000d06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d0a:	619a      	str	r2, [r3, #24]
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <init_ili9486l+0x820>)
 8000d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <init_ili9486l+0x820>)
 8000d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <init_ili9486l+0x820>)
 8000d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d22:	619a      	str	r2, [r3, #24]
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <init_ili9486l+0x820>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <init_ili9486l+0x820>)
 8000d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d32:	619a      	str	r2, [r3, #24]
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <init_ili9486l+0x820>)
 8000d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3a:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0F);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <init_ili9486l+0x820>)
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d42:	619a      	str	r2, [r3, #24]
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <init_ili9486l+0x824>)
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <init_ili9486l+0x84c>)
 8000d48:	619a      	str	r2, [r3, #24]
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <init_ili9486l+0x820>)
 8000d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d50:	619a      	str	r2, [r3, #24]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <init_ili9486l+0x820>)
 8000d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d58:	619a      	str	r2, [r3, #24]
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <init_ili9486l+0x820>)
 8000d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d60:	619a      	str	r2, [r3, #24]
 8000d62:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <init_ili9486l+0x820>)
 8000d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d68:	e018      	b.n	8000d9c <init_ili9486l+0x850>
 8000d6a:	bf00      	nop
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400
 8000d74:	ffff0098 	.word	0xffff0098
 8000d78:	ffff0037 	.word	0xffff0037
 8000d7c:	ffff000a 	.word	0xffff000a
 8000d80:	ffff0013 	.word	0xffff0013
 8000d84:	ffff0004 	.word	0xffff0004
 8000d88:	ffff0011 	.word	0xffff0011
 8000d8c:	ffff000d 	.word	0xffff000d
 8000d90:	ffff0000 	.word	0xffff0000
 8000d94:	ffff00e1 	.word	0xffff00e1
 8000d98:	ffff000f 	.word	0xffff000f
 8000d9c:	619a      	str	r2, [r3, #24]
 8000d9e:	4ba4      	ldr	r3, [pc, #656]	; (8001030 <init_ili9486l+0xae4>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	619a      	str	r2, [r3, #24]
 8000da6:	4ba2      	ldr	r3, [pc, #648]	; (8001030 <init_ili9486l+0xae4>)
 8000da8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dac:	619a      	str	r2, [r3, #24]
    tft_send_data(0x32);
 8000dae:	4ba0      	ldr	r3, [pc, #640]	; (8001030 <init_ili9486l+0xae4>)
 8000db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db4:	619a      	str	r2, [r3, #24]
 8000db6:	4b9f      	ldr	r3, [pc, #636]	; (8001034 <init_ili9486l+0xae8>)
 8000db8:	4a9f      	ldr	r2, [pc, #636]	; (8001038 <init_ili9486l+0xaec>)
 8000dba:	619a      	str	r2, [r3, #24]
 8000dbc:	4b9c      	ldr	r3, [pc, #624]	; (8001030 <init_ili9486l+0xae4>)
 8000dbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dc2:	619a      	str	r2, [r3, #24]
 8000dc4:	4b9a      	ldr	r3, [pc, #616]	; (8001030 <init_ili9486l+0xae4>)
 8000dc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dca:	619a      	str	r2, [r3, #24]
 8000dcc:	4b98      	ldr	r3, [pc, #608]	; (8001030 <init_ili9486l+0xae4>)
 8000dce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	4b96      	ldr	r3, [pc, #600]	; (8001030 <init_ili9486l+0xae4>)
 8000dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dda:	619a      	str	r2, [r3, #24]
 8000ddc:	4b94      	ldr	r3, [pc, #592]	; (8001030 <init_ili9486l+0xae4>)
 8000dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de2:	619a      	str	r2, [r3, #24]
 8000de4:	4b92      	ldr	r3, [pc, #584]	; (8001030 <init_ili9486l+0xae4>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dea:	619a      	str	r2, [r3, #24]
    tft_send_data(0x2E);
 8000dec:	4b90      	ldr	r3, [pc, #576]	; (8001030 <init_ili9486l+0xae4>)
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df2:	619a      	str	r2, [r3, #24]
 8000df4:	4b8f      	ldr	r3, [pc, #572]	; (8001034 <init_ili9486l+0xae8>)
 8000df6:	4a91      	ldr	r2, [pc, #580]	; (800103c <init_ili9486l+0xaf0>)
 8000df8:	619a      	str	r2, [r3, #24]
 8000dfa:	4b8d      	ldr	r3, [pc, #564]	; (8001030 <init_ili9486l+0xae4>)
 8000dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e00:	619a      	str	r2, [r3, #24]
 8000e02:	4b8b      	ldr	r3, [pc, #556]	; (8001030 <init_ili9486l+0xae4>)
 8000e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e08:	619a      	str	r2, [r3, #24]
 8000e0a:	4b89      	ldr	r3, [pc, #548]	; (8001030 <init_ili9486l+0xae4>)
 8000e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e10:	619a      	str	r2, [r3, #24]
 8000e12:	4b87      	ldr	r3, [pc, #540]	; (8001030 <init_ili9486l+0xae4>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	4b85      	ldr	r3, [pc, #532]	; (8001030 <init_ili9486l+0xae4>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e20:	619a      	str	r2, [r3, #24]
 8000e22:	4b83      	ldr	r3, [pc, #524]	; (8001030 <init_ili9486l+0xae4>)
 8000e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e28:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0B);
 8000e2a:	4b81      	ldr	r3, [pc, #516]	; (8001030 <init_ili9486l+0xae4>)
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e30:	619a      	str	r2, [r3, #24]
 8000e32:	4b80      	ldr	r3, [pc, #512]	; (8001034 <init_ili9486l+0xae8>)
 8000e34:	4a82      	ldr	r2, [pc, #520]	; (8001040 <init_ili9486l+0xaf4>)
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <init_ili9486l+0xae4>)
 8000e3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	4b7b      	ldr	r3, [pc, #492]	; (8001030 <init_ili9486l+0xae4>)
 8000e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e46:	619a      	str	r2, [r3, #24]
 8000e48:	4b79      	ldr	r3, [pc, #484]	; (8001030 <init_ili9486l+0xae4>)
 8000e4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e4e:	619a      	str	r2, [r3, #24]
 8000e50:	4b77      	ldr	r3, [pc, #476]	; (8001030 <init_ili9486l+0xae4>)
 8000e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	4b75      	ldr	r3, [pc, #468]	; (8001030 <init_ili9486l+0xae4>)
 8000e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5e:	619a      	str	r2, [r3, #24]
 8000e60:	4b73      	ldr	r3, [pc, #460]	; (8001030 <init_ili9486l+0xae4>)
 8000e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e66:	619a      	str	r2, [r3, #24]
    tft_send_data(0x0D);
 8000e68:	4b71      	ldr	r3, [pc, #452]	; (8001030 <init_ili9486l+0xae4>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b70      	ldr	r3, [pc, #448]	; (8001034 <init_ili9486l+0xae8>)
 8000e72:	4a74      	ldr	r2, [pc, #464]	; (8001044 <init_ili9486l+0xaf8>)
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	4b6e      	ldr	r3, [pc, #440]	; (8001030 <init_ili9486l+0xae4>)
 8000e78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e7c:	619a      	str	r2, [r3, #24]
 8000e7e:	4b6c      	ldr	r3, [pc, #432]	; (8001030 <init_ili9486l+0xae4>)
 8000e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	4b6a      	ldr	r3, [pc, #424]	; (8001030 <init_ili9486l+0xae4>)
 8000e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	4b68      	ldr	r3, [pc, #416]	; (8001030 <init_ili9486l+0xae4>)
 8000e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e94:	619a      	str	r2, [r3, #24]
 8000e96:	4b66      	ldr	r3, [pc, #408]	; (8001030 <init_ili9486l+0xae4>)
 8000e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	4b64      	ldr	r3, [pc, #400]	; (8001030 <init_ili9486l+0xae4>)
 8000ea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea4:	619a      	str	r2, [r3, #24]
    tft_send_data(0x05);
 8000ea6:	4b62      	ldr	r3, [pc, #392]	; (8001030 <init_ili9486l+0xae4>)
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eac:	619a      	str	r2, [r3, #24]
 8000eae:	4b61      	ldr	r3, [pc, #388]	; (8001034 <init_ili9486l+0xae8>)
 8000eb0:	4a65      	ldr	r2, [pc, #404]	; (8001048 <init_ili9486l+0xafc>)
 8000eb2:	619a      	str	r2, [r3, #24]
 8000eb4:	4b5e      	ldr	r3, [pc, #376]	; (8001030 <init_ili9486l+0xae4>)
 8000eb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	4b5c      	ldr	r3, [pc, #368]	; (8001030 <init_ili9486l+0xae4>)
 8000ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <init_ili9486l+0xae4>)
 8000ec6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	4b58      	ldr	r3, [pc, #352]	; (8001030 <init_ili9486l+0xae4>)
 8000ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b56      	ldr	r3, [pc, #344]	; (8001030 <init_ili9486l+0xae4>)
 8000ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	4b54      	ldr	r3, [pc, #336]	; (8001030 <init_ili9486l+0xae4>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee2:	619a      	str	r2, [r3, #24]
    tft_send_data(0x47);
 8000ee4:	4b52      	ldr	r3, [pc, #328]	; (8001030 <init_ili9486l+0xae4>)
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	4b51      	ldr	r3, [pc, #324]	; (8001034 <init_ili9486l+0xae8>)
 8000eee:	4a57      	ldr	r2, [pc, #348]	; (800104c <init_ili9486l+0xb00>)
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <init_ili9486l+0xae4>)
 8000ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ef8:	619a      	str	r2, [r3, #24]
 8000efa:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <init_ili9486l+0xae4>)
 8000efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f00:	619a      	str	r2, [r3, #24]
 8000f02:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <init_ili9486l+0xae4>)
 8000f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f08:	619a      	str	r2, [r3, #24]
 8000f0a:	4b49      	ldr	r3, [pc, #292]	; (8001030 <init_ili9486l+0xae4>)
 8000f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f10:	619a      	str	r2, [r3, #24]
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <init_ili9486l+0xae4>)
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <init_ili9486l+0xae4>)
 8000f1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f20:	619a      	str	r2, [r3, #24]
    tft_send_data(0x75);
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <init_ili9486l+0xae4>)
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f28:	619a      	str	r2, [r3, #24]
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <init_ili9486l+0xae8>)
 8000f2c:	4a48      	ldr	r2, [pc, #288]	; (8001050 <init_ili9486l+0xb04>)
 8000f2e:	619a      	str	r2, [r3, #24]
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <init_ili9486l+0xae4>)
 8000f32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <init_ili9486l+0xae4>)
 8000f3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <init_ili9486l+0xae4>)
 8000f42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f46:	619a      	str	r2, [r3, #24]
 8000f48:	4b39      	ldr	r3, [pc, #228]	; (8001030 <init_ili9486l+0xae4>)
 8000f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4e:	619a      	str	r2, [r3, #24]
 8000f50:	4b37      	ldr	r3, [pc, #220]	; (8001030 <init_ili9486l+0xae4>)
 8000f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f56:	619a      	str	r2, [r3, #24]
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <init_ili9486l+0xae4>)
 8000f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5e:	619a      	str	r2, [r3, #24]
    tft_send_data(0x37);
 8000f60:	4b33      	ldr	r3, [pc, #204]	; (8001030 <init_ili9486l+0xae4>)
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	4b32      	ldr	r3, [pc, #200]	; (8001034 <init_ili9486l+0xae8>)
 8000f6a:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <init_ili9486l+0xb08>)
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <init_ili9486l+0xae4>)
 8000f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f74:	619a      	str	r2, [r3, #24]
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <init_ili9486l+0xae4>)
 8000f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f7c:	619a      	str	r2, [r3, #24]
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <init_ili9486l+0xae4>)
 8000f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f84:	619a      	str	r2, [r3, #24]
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <init_ili9486l+0xae4>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	619a      	str	r2, [r3, #24]
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <init_ili9486l+0xae4>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	619a      	str	r2, [r3, #24]
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <init_ili9486l+0xae4>)
 8000f98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9c:	619a      	str	r2, [r3, #24]
    tft_send_data(0x06);
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <init_ili9486l+0xae4>)
 8000fa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa4:	619a      	str	r2, [r3, #24]
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <init_ili9486l+0xae8>)
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <init_ili9486l+0xb0c>)
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <init_ili9486l+0xae4>)
 8000fae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <init_ili9486l+0xae4>)
 8000fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fba:	619a      	str	r2, [r3, #24]
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <init_ili9486l+0xae4>)
 8000fbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <init_ili9486l+0xae4>)
 8000fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fca:	619a      	str	r2, [r3, #24]
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <init_ili9486l+0xae4>)
 8000fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <init_ili9486l+0xae4>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	619a      	str	r2, [r3, #24]
    tft_send_data(0x10);
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <init_ili9486l+0xae4>)
 8000fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe2:	619a      	str	r2, [r3, #24]
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <init_ili9486l+0xae8>)
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <init_ili9486l+0xb10>)
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <init_ili9486l+0xae4>)
 8000fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <init_ili9486l+0xae4>)
 8000ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ff8:	619a      	str	r2, [r3, #24]
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <init_ili9486l+0xae4>)
 8000ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001000:	619a      	str	r2, [r3, #24]
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <init_ili9486l+0xae4>)
 8001004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001008:	619a      	str	r2, [r3, #24]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <init_ili9486l+0xae4>)
 800100c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <init_ili9486l+0xae4>)
 8001014:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001018:	619a      	str	r2, [r3, #24]
    tft_send_data(0x03);
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <init_ili9486l+0xae4>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	619a      	str	r2, [r3, #24]
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <init_ili9486l+0xae8>)
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <init_ili9486l+0xb14>)
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <init_ili9486l+0xae4>)
 800102a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800102e:	e019      	b.n	8001064 <init_ili9486l+0xb18>
 8001030:	40020000 	.word	0x40020000
 8001034:	40020400 	.word	0x40020400
 8001038:	ffff0032 	.word	0xffff0032
 800103c:	ffff002e 	.word	0xffff002e
 8001040:	ffff000b 	.word	0xffff000b
 8001044:	ffff000d 	.word	0xffff000d
 8001048:	ffff0005 	.word	0xffff0005
 800104c:	ffff0047 	.word	0xffff0047
 8001050:	ffff0075 	.word	0xffff0075
 8001054:	ffff0037 	.word	0xffff0037
 8001058:	ffff0006 	.word	0xffff0006
 800105c:	ffff0010 	.word	0xffff0010
 8001060:	ffff0003 	.word	0xffff0003
 8001064:	619a      	str	r2, [r3, #24]
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <init_ili9486l+0xd28>)
 8001068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800106c:	619a      	str	r2, [r3, #24]
 800106e:	4b81      	ldr	r3, [pc, #516]	; (8001274 <init_ili9486l+0xd28>)
 8001070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	4b7f      	ldr	r3, [pc, #508]	; (8001274 <init_ili9486l+0xd28>)
 8001078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <init_ili9486l+0xd28>)
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <init_ili9486l+0xd28>)
 8001088:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108c:	619a      	str	r2, [r3, #24]
    tft_send_data(0x24);
 800108e:	4b79      	ldr	r3, [pc, #484]	; (8001274 <init_ili9486l+0xd28>)
 8001090:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	4b78      	ldr	r3, [pc, #480]	; (8001278 <init_ili9486l+0xd2c>)
 8001098:	4a78      	ldr	r2, [pc, #480]	; (800127c <init_ili9486l+0xd30>)
 800109a:	619a      	str	r2, [r3, #24]
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <init_ili9486l+0xd28>)
 800109e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010a2:	619a      	str	r2, [r3, #24]
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <init_ili9486l+0xd28>)
 80010a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010aa:	619a      	str	r2, [r3, #24]
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <init_ili9486l+0xd28>)
 80010ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <init_ili9486l+0xd28>)
 80010b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ba:	619a      	str	r2, [r3, #24]
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <init_ili9486l+0xd28>)
 80010be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c2:	619a      	str	r2, [r3, #24]
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <init_ili9486l+0xd28>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	619a      	str	r2, [r3, #24]
    tft_send_data(0x20);
 80010cc:	4b69      	ldr	r3, [pc, #420]	; (8001274 <init_ili9486l+0xd28>)
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	4b68      	ldr	r3, [pc, #416]	; (8001278 <init_ili9486l+0xd2c>)
 80010d6:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <init_ili9486l+0xd34>)
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	4b66      	ldr	r3, [pc, #408]	; (8001274 <init_ili9486l+0xd28>)
 80010dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010e0:	619a      	str	r2, [r3, #24]
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <init_ili9486l+0xd28>)
 80010e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010e8:	619a      	str	r2, [r3, #24]
 80010ea:	4b62      	ldr	r3, [pc, #392]	; (8001274 <init_ili9486l+0xd28>)
 80010ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	4b60      	ldr	r3, [pc, #384]	; (8001274 <init_ili9486l+0xd28>)
 80010f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f8:	619a      	str	r2, [r3, #24]
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <init_ili9486l+0xd28>)
 80010fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001100:	619a      	str	r2, [r3, #24]
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <init_ili9486l+0xd28>)
 8001104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001108:	619a      	str	r2, [r3, #24]
    tft_send_data(0x00);
 800110a:	4b5a      	ldr	r3, [pc, #360]	; (8001274 <init_ili9486l+0xd28>)
 800110c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <init_ili9486l+0xd2c>)
 8001114:	4a5b      	ldr	r2, [pc, #364]	; (8001284 <init_ili9486l+0xd38>)
 8001116:	619a      	str	r2, [r3, #24]
 8001118:	4b56      	ldr	r3, [pc, #344]	; (8001274 <init_ili9486l+0xd28>)
 800111a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800111e:	619a      	str	r2, [r3, #24]
 8001120:	4b54      	ldr	r3, [pc, #336]	; (8001274 <init_ili9486l+0xd28>)
 8001122:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	4b52      	ldr	r3, [pc, #328]	; (8001274 <init_ili9486l+0xd28>)
 800112a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800112e:	619a      	str	r2, [r3, #24]
 8001130:	4b50      	ldr	r3, [pc, #320]	; (8001274 <init_ili9486l+0xd28>)
 8001132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001136:	619a      	str	r2, [r3, #24]
 8001138:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <init_ili9486l+0xd28>)
 800113a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <init_ili9486l+0xd28>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	619a      	str	r2, [r3, #24]
    
    // Color Inversion Off
    tft_send_command(INVOFF);
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <init_ili9486l+0xd28>)
 800114a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114e:	619a      	str	r2, [r3, #24]
 8001150:	4b48      	ldr	r3, [pc, #288]	; (8001274 <init_ili9486l+0xd28>)
 8001152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	4b47      	ldr	r3, [pc, #284]	; (8001278 <init_ili9486l+0xd2c>)
 800115a:	4a49      	ldr	r2, [pc, #292]	; (8001280 <init_ili9486l+0xd34>)
 800115c:	619a      	str	r2, [r3, #24]
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <init_ili9486l+0xd28>)
 8001160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001164:	619a      	str	r2, [r3, #24]
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <init_ili9486l+0xd28>)
 8001168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <init_ili9486l+0xd28>)
 8001170:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <init_ili9486l+0xd28>)
 8001178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <init_ili9486l+0xd28>)
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <init_ili9486l+0xd28>)
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <init_ili9486l+0xd28>)
 8001190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001194:	619a      	str	r2, [r3, #24]
    
    // Memory Access Control
    tft_send_command(MADCTL);
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <init_ili9486l+0xd28>)
 8001198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119c:	619a      	str	r2, [r3, #24]
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <init_ili9486l+0xd28>)
 80011a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011a4:	619a      	str	r2, [r3, #24]
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <init_ili9486l+0xd2c>)
 80011a8:	4a37      	ldr	r2, [pc, #220]	; (8001288 <init_ili9486l+0xd3c>)
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <init_ili9486l+0xd28>)
 80011ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011b2:	619a      	str	r2, [r3, #24]
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <init_ili9486l+0xd28>)
 80011b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011ba:	619a      	str	r2, [r3, #24]
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <init_ili9486l+0xd28>)
 80011be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <init_ili9486l+0xd28>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <init_ili9486l+0xd28>)
 80011ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <init_ili9486l+0xd28>)
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	619a      	str	r2, [r3, #24]
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <init_ili9486l+0xd28>)
 80011de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e2:	619a      	str	r2, [r3, #24]
    tft_send_data(0xE8);
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <init_ili9486l+0xd28>)
 80011e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <init_ili9486l+0xd2c>)
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <init_ili9486l+0xd40>)
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <init_ili9486l+0xd28>)
 80011f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <init_ili9486l+0xd28>)
 80011fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <init_ili9486l+0xd28>)
 8001204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <init_ili9486l+0xd28>)
 800120c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001210:	619a      	str	r2, [r3, #24]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <init_ili9486l+0xd28>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <init_ili9486l+0xd28>)
 800121c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001220:	619a      	str	r2, [r3, #24]
    
    // Display On
    tft_send_command(DISON);
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <init_ili9486l+0xd28>)
 8001224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <init_ili9486l+0xd28>)
 800122c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <init_ili9486l+0xd2c>)
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <init_ili9486l+0xd44>)
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <init_ili9486l+0xd28>)
 800123a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <init_ili9486l+0xd28>)
 8001242:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <init_ili9486l+0xd28>)
 800124a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <init_ili9486l+0xd28>)
 8001252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <init_ili9486l+0xd28>)
 800125a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125e:	619a      	str	r2, [r3, #24]
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <init_ili9486l+0xd28>)
 8001262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <init_ili9486l+0xd28>)
 800126a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126e:	619a      	str	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	ffff0024 	.word	0xffff0024
 8001280:	ffff0020 	.word	0xffff0020
 8001284:	ffff0000 	.word	0xffff0000
 8001288:	ffff0036 	.word	0xffff0036
 800128c:	ffff00e8 	.word	0xffff00e8
 8001290:	ffff0029 	.word	0xffff0029

08001294 <init_display>:
#if defined(__arm__)

#include "./arm/stm32f411_ili9486l.h"

uint8_t init_display()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	tft_start_write();
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <init_display+0x20>)
 800129a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129e:	619a      	str	r2, [r3, #24]
	init_ili9486l();
 80012a0:	f7ff f954 	bl	800054c <init_ili9486l>
	tft_end_write();
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <init_display+0x20>)
 80012a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012aa:	619a      	str	r2, [r3, #24]
	return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020000 	.word	0x40020000

080012b8 <update_display>:

void update_display()
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
	tft_start_write();
 80012be:	4ba5      	ldr	r3, [pc, #660]	; (8001554 <update_display+0x29c>)
 80012c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c4:	619a      	str	r2, [r3, #24]
	tft_set_write_window(0, 0, 479, 319);
 80012c6:	4ba3      	ldr	r3, [pc, #652]	; (8001554 <update_display+0x29c>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	619a      	str	r2, [r3, #24]
 80012ce:	4ba1      	ldr	r3, [pc, #644]	; (8001554 <update_display+0x29c>)
 80012d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012d4:	619a      	str	r2, [r3, #24]
 80012d6:	4ba0      	ldr	r3, [pc, #640]	; (8001558 <update_display+0x2a0>)
 80012d8:	4aa0      	ldr	r2, [pc, #640]	; (800155c <update_display+0x2a4>)
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	4b9d      	ldr	r3, [pc, #628]	; (8001554 <update_display+0x29c>)
 80012de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012e2:	619a      	str	r2, [r3, #24]
 80012e4:	4b9b      	ldr	r3, [pc, #620]	; (8001554 <update_display+0x29c>)
 80012e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	4b99      	ldr	r3, [pc, #612]	; (8001554 <update_display+0x29c>)
 80012ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	4b97      	ldr	r3, [pc, #604]	; (8001554 <update_display+0x29c>)
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fa:	619a      	str	r2, [r3, #24]
 80012fc:	4b95      	ldr	r3, [pc, #596]	; (8001554 <update_display+0x29c>)
 80012fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001302:	619a      	str	r2, [r3, #24]
 8001304:	4b93      	ldr	r3, [pc, #588]	; (8001554 <update_display+0x29c>)
 8001306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b91      	ldr	r3, [pc, #580]	; (8001554 <update_display+0x29c>)
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001312:	619a      	str	r2, [r3, #24]
 8001314:	4b8f      	ldr	r3, [pc, #572]	; (8001554 <update_display+0x29c>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	4b8e      	ldr	r3, [pc, #568]	; (8001558 <update_display+0x2a0>)
 800131e:	4a90      	ldr	r2, [pc, #576]	; (8001560 <update_display+0x2a8>)
 8001320:	619a      	str	r2, [r3, #24]
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <update_display+0x29c>)
 8001324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	4b8a      	ldr	r3, [pc, #552]	; (8001554 <update_display+0x29c>)
 800132c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001330:	619a      	str	r2, [r3, #24]
 8001332:	4b88      	ldr	r3, [pc, #544]	; (8001554 <update_display+0x29c>)
 8001334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001338:	619a      	str	r2, [r3, #24]
 800133a:	4b86      	ldr	r3, [pc, #536]	; (8001554 <update_display+0x29c>)
 800133c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	4b84      	ldr	r3, [pc, #528]	; (8001554 <update_display+0x29c>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	4b82      	ldr	r3, [pc, #520]	; (8001554 <update_display+0x29c>)
 800134c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	4b80      	ldr	r3, [pc, #512]	; (8001554 <update_display+0x29c>)
 8001354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <update_display+0x2a0>)
 800135c:	4a80      	ldr	r2, [pc, #512]	; (8001560 <update_display+0x2a8>)
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <update_display+0x29c>)
 8001362:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <update_display+0x29c>)
 800136a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800136e:	619a      	str	r2, [r3, #24]
 8001370:	4b78      	ldr	r3, [pc, #480]	; (8001554 <update_display+0x29c>)
 8001372:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	4b76      	ldr	r3, [pc, #472]	; (8001554 <update_display+0x29c>)
 800137a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137e:	619a      	str	r2, [r3, #24]
 8001380:	4b74      	ldr	r3, [pc, #464]	; (8001554 <update_display+0x29c>)
 8001382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <update_display+0x29c>)
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	619a      	str	r2, [r3, #24]
 8001390:	4b70      	ldr	r3, [pc, #448]	; (8001554 <update_display+0x29c>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <update_display+0x2a0>)
 800139a:	4a72      	ldr	r2, [pc, #456]	; (8001564 <update_display+0x2ac>)
 800139c:	619a      	str	r2, [r3, #24]
 800139e:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <update_display+0x29c>)
 80013a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <update_display+0x29c>)
 80013a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	4b69      	ldr	r3, [pc, #420]	; (8001554 <update_display+0x29c>)
 80013b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	4b67      	ldr	r3, [pc, #412]	; (8001554 <update_display+0x29c>)
 80013b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	4b65      	ldr	r3, [pc, #404]	; (8001554 <update_display+0x29c>)
 80013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c4:	619a      	str	r2, [r3, #24]
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <update_display+0x29c>)
 80013c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013cc:	619a      	str	r2, [r3, #24]
 80013ce:	4b61      	ldr	r3, [pc, #388]	; (8001554 <update_display+0x29c>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <update_display+0x2a0>)
 80013d8:	4a63      	ldr	r2, [pc, #396]	; (8001568 <update_display+0x2b0>)
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <update_display+0x29c>)
 80013de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <update_display+0x29c>)
 80013e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013ea:	619a      	str	r2, [r3, #24]
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <update_display+0x29c>)
 80013ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <update_display+0x29c>)
 80013f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	4b55      	ldr	r3, [pc, #340]	; (8001554 <update_display+0x29c>)
 80013fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <update_display+0x29c>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <update_display+0x29c>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <update_display+0x29c>)
 8001416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <update_display+0x2a0>)
 800141e:	4a53      	ldr	r2, [pc, #332]	; (800156c <update_display+0x2b4>)
 8001420:	619a      	str	r2, [r3, #24]
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <update_display+0x29c>)
 8001424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <update_display+0x29c>)
 800142c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	4b48      	ldr	r3, [pc, #288]	; (8001554 <update_display+0x29c>)
 8001434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	4b46      	ldr	r3, [pc, #280]	; (8001554 <update_display+0x29c>)
 800143c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001440:	619a      	str	r2, [r3, #24]
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <update_display+0x29c>)
 8001444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	4b42      	ldr	r3, [pc, #264]	; (8001554 <update_display+0x29c>)
 800144c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001450:	619a      	str	r2, [r3, #24]
 8001452:	4b40      	ldr	r3, [pc, #256]	; (8001554 <update_display+0x29c>)
 8001454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001458:	619a      	str	r2, [r3, #24]
 800145a:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <update_display+0x29c>)
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	619a      	str	r2, [r3, #24]
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <update_display+0x2a0>)
 8001464:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <update_display+0x2a8>)
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <update_display+0x29c>)
 800146a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <update_display+0x29c>)
 8001472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001476:	619a      	str	r2, [r3, #24]
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <update_display+0x29c>)
 800147a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800147e:	619a      	str	r2, [r3, #24]
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <update_display+0x29c>)
 8001482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001486:	619a      	str	r2, [r3, #24]
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <update_display+0x29c>)
 800148a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <update_display+0x29c>)
 8001492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <update_display+0x29c>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <update_display+0x2a0>)
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <update_display+0x2a8>)
 80014a4:	619a      	str	r2, [r3, #24]
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <update_display+0x29c>)
 80014a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <update_display+0x29c>)
 80014b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014b4:	619a      	str	r2, [r3, #24]
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <update_display+0x29c>)
 80014b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <update_display+0x29c>)
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <update_display+0x29c>)
 80014c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014cc:	619a      	str	r2, [r3, #24]
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <update_display+0x29c>)
 80014d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d4:	619a      	str	r2, [r3, #24]
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <update_display+0x29c>)
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014dc:	619a      	str	r2, [r3, #24]
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <update_display+0x2a0>)
 80014e0:	4a20      	ldr	r2, [pc, #128]	; (8001564 <update_display+0x2ac>)
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <update_display+0x29c>)
 80014e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <update_display+0x29c>)
 80014ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <update_display+0x29c>)
 80014f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <update_display+0x29c>)
 80014fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <update_display+0x29c>)
 8001506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <update_display+0x29c>)
 800150e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001512:	619a      	str	r2, [r3, #24]
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <update_display+0x29c>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <update_display+0x2a0>)
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <update_display+0x2b8>)
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <update_display+0x29c>)
 8001524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <update_display+0x29c>)
 800152c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <update_display+0x29c>)
 8001534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001538:	619a      	str	r2, [r3, #24]
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <update_display+0x29c>)
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <update_display+0x29c>)
 8001544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001548:	619a      	str	r2, [r3, #24]
 800154a:	4b02      	ldr	r3, [pc, #8]	; (8001554 <update_display+0x29c>)
 800154c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001550:	e010      	b.n	8001574 <update_display+0x2bc>
 8001552:	bf00      	nop
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	ffff002a 	.word	0xffff002a
 8001560:	ffff0000 	.word	0xffff0000
 8001564:	ffff0001 	.word	0xffff0001
 8001568:	ffff00df 	.word	0xffff00df
 800156c:	ffff002b 	.word	0xffff002b
 8001570:	ffff003f 	.word	0xffff003f
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <update_display+0x3f8>)
 8001578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157c:	619a      	str	r2, [r3, #24]
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <update_display+0x3f8>)
 8001580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <update_display+0x3fc>)
 8001588:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <update_display+0x400>)
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	4b48      	ldr	r3, [pc, #288]	; (80016b0 <update_display+0x3f8>)
 800158e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <update_display+0x3f8>)
 8001596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <update_display+0x3f8>)
 800159e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <update_display+0x3f8>)
 80015a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <update_display+0x3f8>)
 80015ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <update_display+0x3f8>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <update_display+0x3f8>)
 80015be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c2:	619a      	str	r2, [r3, #24]
	
	for(uint16_t y = 0; y < 320; ++y)
 80015c4:	2300      	movs	r3, #0
 80015c6:	80fb      	strh	r3, [r7, #6]
 80015c8:	e063      	b.n	8001692 <update_display+0x3da>
	{
		for(uint16_t x = 0; x < 480; ++x)
 80015ca:	2300      	movs	r3, #0
 80015cc:	80bb      	strh	r3, [r7, #4]
 80015ce:	e059      	b.n	8001684 <update_display+0x3cc>
		{
			//tft_send_color(rgb332_to_rgb565[vram[(y >> 1) * DISPLAY_WIDTH + (x >> 1)]]);
			tft_send_color(rgb332_to_rgb565[vram[(x >> 1)][(y >> 1)]]);
 80015d0:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <update_display+0x3f8>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	4a34      	ldr	r2, [pc, #208]	; (80016bc <update_display+0x404>)
 80015ea:	460b      	mov	r3, r1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	015b      	lsls	r3, r3, #5
 80015f2:	4413      	add	r3, r2
 80015f4:	4403      	add	r3, r0
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <update_display+0x408>)
 80015fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001600:	4a2c      	ldr	r2, [pc, #176]	; (80016b4 <update_display+0x3fc>)
 8001602:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8001606:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <update_display+0x404>)
 800161e:	460b      	mov	r3, r1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	4413      	add	r3, r2
 8001628:	4403      	add	r3, r0
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <update_display+0x408>)
 8001630:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <update_display+0x38e>
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <update_display+0x3f8>)
 800163e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	e003      	b.n	800164e <update_display+0x396>
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <update_display+0x3f8>)
 8001648:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800164c:	619a      	str	r2, [r3, #24]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <update_display+0x3f8>)
 8001650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001654:	619a      	str	r2, [r3, #24]
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <update_display+0x3f8>)
 8001658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800165c:	619a      	str	r2, [r3, #24]
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <update_display+0x3f8>)
 8001660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001664:	619a      	str	r2, [r3, #24]
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <update_display+0x3f8>)
 8001668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <update_display+0x3f8>)
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	619a      	str	r2, [r3, #24]
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <update_display+0x3f8>)
 8001678:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167c:	619a      	str	r2, [r3, #24]
		for(uint16_t x = 0; x < 480; ++x)
 800167e:	88bb      	ldrh	r3, [r7, #4]
 8001680:	3301      	adds	r3, #1
 8001682:	80bb      	strh	r3, [r7, #4]
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800168a:	d3a1      	bcc.n	80015d0 <update_display+0x318>
	for(uint16_t y = 0; y < 320; ++y)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	3301      	adds	r3, #1
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001698:	d397      	bcc.n	80015ca <update_display+0x312>
		}
	}
	
	tft_end_write();
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <update_display+0x3f8>)
 800169c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a0:	619a      	str	r2, [r3, #24]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	ffff002c 	.word	0xffff002c
 80016bc:	20000040 	.word	0x20000040
 80016c0:	0800437c 	.word	0x0800437c

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ca:	f000 faad 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ce:	f000 f831 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d2:	f000 f91f 	bl	8001914 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016d6:	f000 f8e7 	bl	80018a8 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016da:	f002 f887 	bl	80037ec <MX_FATFS_Init>
  MX_ADC1_Init();
 80016de:	f000 f891 	bl	8001804 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 80016e2:	f7ff fdd7 	bl	8001294 <init_display>
  clear_screen();
 80016e6:	f7fe ff25 	bl	8000534 <clear_screen>
  for(uint8_t y = 0; y < DISPLAY_HEIGHT; ++y)
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]
 80016ee:	e01b      	b.n	8001728 <main+0x64>
  {
	  for(uint8_t x = 0; x < DISPLAY_WIDTH; ++x)
 80016f0:	2300      	movs	r3, #0
 80016f2:	71bb      	strb	r3, [r7, #6]
 80016f4:	e012      	b.n	800171c <main+0x58>
	  {
		  draw_pixel(x, y, (y * DISPLAY_WIDTH + x) & 0xFF);
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	b218      	sxth	r0, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	b219      	sxth	r1, r3
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	461a      	mov	r2, r3
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	b2da      	uxtb	r2, r3
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	4413      	add	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	f7fe fedf 	bl	80004d4 <draw_pixel>
	  for(uint8_t x = 0; x < DISPLAY_WIDTH; ++x)
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	3301      	adds	r3, #1
 800171a:	71bb      	strb	r3, [r7, #6]
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	2bef      	cmp	r3, #239	; 0xef
 8001720:	d9e9      	bls.n	80016f6 <main+0x32>
  for(uint8_t y = 0; y < DISPLAY_HEIGHT; ++y)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3301      	adds	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b9f      	cmp	r3, #159	; 0x9f
 800172c:	d9e0      	bls.n	80016f0 <main+0x2c>
	  }
  }
  //draw_rect(20, 10, 200, 90, rgb888_to_rgb332(255, 0, 0));
  //fill_rect(40, 80, 100, 75, rgb888_to_rgb332(0, 200, 0));
  update_display();
 800172e:	f7ff fdc3 	bl	80012b8 <update_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x6e>

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2230      	movs	r2, #48	; 0x30
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fde1 	bl	800430a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <SystemClock_Config+0xc8>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a26      	ldr	r2, [pc, #152]	; (80017fc <SystemClock_Config+0xc8>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <SystemClock_Config+0xc8>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <SystemClock_Config+0xcc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <SystemClock_Config+0xcc>)
 800177e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <SystemClock_Config+0xcc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80017a4:	230c      	movs	r3, #12
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017a8:	2360      	movs	r3, #96	; 0x60
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017b0:	2304      	movs	r3, #4
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 ffc1 	bl	8002740 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017c4:	f000 f910 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2302      	movs	r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2103      	movs	r1, #3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fa23 	bl	8002c30 <HAL_RCC_ClockConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017f0:	f000 f8fa 	bl	80019e8 <Error_Handler>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3750      	adds	r7, #80	; 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000

08001804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC1_Init+0x98>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_ADC1_Init+0x9c>)
 800181a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC1_Init+0x98>)
 800181e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001822:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC1_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_ADC1_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_ADC1_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_ADC1_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_ADC1_Init+0x98>)
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <MX_ADC1_Init+0xa0>)
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_ADC1_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_ADC1_Init+0x98>)
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_ADC1_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_ADC1_Init+0x98>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC1_Init+0x98>)
 8001866:	f000 fa75 	bl	8001d54 <HAL_ADC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001870:	f000 f8ba 	bl	80019e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001874:	2301      	movs	r3, #1
 8001876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC1_Init+0x98>)
 8001886:	f000 faa9 	bl	8001ddc <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001890:	f000 f8aa 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20009640 	.word	0x20009640
 80018a0:	40012000 	.word	0x40012000
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI1_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_SPI1_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI1_Init+0x64>)
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI1_Init+0x64>)
 80018dc:	2230      	movs	r2, #48	; 0x30
 80018de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI1_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI1_Init+0x64>)
 80018fa:	f001 fb45 	bl	8002f88 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001904:	f000 f870 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20009688 	.word	0x20009688
 8001910:	40013000 	.word	0x40013000

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <MX_GPIO_Init+0xc8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <MX_GPIO_Init+0xc8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <MX_GPIO_Init+0xc8>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_GPIO_Init+0xc8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800197e:	2200      	movs	r2, #0
 8001980:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001984:	4816      	ldr	r0, [pc, #88]	; (80019e0 <MX_GPIO_Init+0xcc>)
 8001986:	f000 fec1 	bl	800270c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 4147 	mov.w	r1, #50944	; 0xc700
 8001990:	4814      	ldr	r0, [pc, #80]	; (80019e4 <MX_GPIO_Init+0xd0>)
 8001992:	f000 febb 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001996:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800199a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a0:	2302      	movs	r3, #2
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4619      	mov	r1, r3
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_GPIO_Init+0xcc>)
 80019b0:	f000 fd28 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA14
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80019b4:	f44f 4347 	mov.w	r3, #50944	; 0xc700
 80019b8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019be:	2302      	movs	r3, #2
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_GPIO_Init+0xd0>)
 80019ce:	f000 fd19 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40020000 	.word	0x40020000

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>
	...

080019f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_ADC_MspInit+0x7c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d127      	bne.n	8001ab6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_ADC_MspInit+0x80>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_ADC_MspInit+0x80>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_ADC_MspInit+0x80>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_ADC_MspInit+0x80>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_ADC_MspInit+0x80>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_ADC_MspInit+0x80>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001a9e:	231e      	movs	r3, #30
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_ADC_MspInit+0x84>)
 8001ab2:	f000 fca7 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40012000 	.word	0x40012000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_SPI_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_SPI_MspInit+0x88>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_SPI_MspInit+0x88>)
 8001af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_SPI_MspInit+0x88>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_SPI_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_SPI_MspInit+0x88>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_SPI_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b26:	23e0      	movs	r3, #224	; 0xe0
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b36:	2305      	movs	r3, #5
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_SPI_MspInit+0x8c>)
 8001b42:	f000 fc5f 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40013000 	.word	0x40013000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f890 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bda:	490e      	ldr	r1, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be0:	e002      	b.n	8001be8 <LoopCopyDataInit>

08001be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be6:	3304      	adds	r3, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bec:	d3f9      	bcc.n	8001be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bf0:	4c0b      	ldr	r4, [pc, #44]	; (8001c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf4:	e001      	b.n	8001bfa <LoopFillZerobss>

08001bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf8:	3204      	adds	r2, #4

08001bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bfc:	d3fb      	bcc.n	8001bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bfe:	f7ff ffd7 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f002 fb8b 	bl	800431c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff fd5d 	bl	80016c4 <main>
  bx  lr    
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001c18:	0800459c 	.word	0x0800459c
  ldr r2, =_sbss
 8001c1c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001c20:	20009704 	.word	0x20009704

08001c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_Init+0x40>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_Init+0x40>)
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x40>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 fba3 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f808 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff feca 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x54>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x58>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fbad 	bl	80023ea <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d80a      	bhi.n	8001cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 fb83 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <HAL_InitTick+0x5c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	200096e0 	.word	0x200096e0

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200096e0 	.word	0x200096e0

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e033      	b.n	8001dd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fe66 	bl	8001a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	f043 0202 	orr.w	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f94a 	bl	8002040 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc2:	e001      	b.n	8001dc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1c>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e113      	b.n	8002020 <HAL_ADC_ConfigChannel+0x244>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d925      	bls.n	8001e54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b1e      	subs	r3, #30
 8001e1e:	2207      	movs	r2, #7
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68d9      	ldr	r1, [r3, #12]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4403      	add	r3, r0
 8001e46:	3b1e      	subs	r3, #30
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	e022      	b.n	8001e9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6919      	ldr	r1, [r3, #16]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	2207      	movs	r2, #7
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4403      	add	r3, r0
 8001e90:	409a      	lsls	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d824      	bhi.n	8001eec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b05      	subs	r3, #5
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b05      	subs	r3, #5
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e04c      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d824      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b23      	subs	r3, #35	; 0x23
 8001f06:	221f      	movs	r2, #31
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	400a      	ands	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b23      	subs	r3, #35	; 0x23
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3c:	e023      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b41      	subs	r3, #65	; 0x41
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b41      	subs	r3, #65	; 0x41
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_ADC_ConfigChannel+0x250>)
 8001f88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_ADC_ConfigChannel+0x254>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10f      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d8>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_ADC_ConfigChannel+0x254>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_ADC_ConfigChannel+0x258>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d122      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ADC_ConfigChannel+0x258>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d111      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_ADC_ConfigChannel+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x260>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	0c9a      	lsrs	r2, r3, #18
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002008:	e002      	b.n	8002010 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40012300 	.word	0x40012300
 8002030:	40012000 	.word	0x40012000
 8002034:	10000012 	.word	0x10000012
 8002038:	20000000 	.word	0x20000000
 800203c:	431bde83 	.word	0x431bde83

08002040 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <ADC_Init+0x1f0>)
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	021a      	lsls	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <ADC_Init+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e00f      	b.n	800213e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800212c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800213c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0202 	bic.w	r2, r2, #2
 800214c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
 8002158:	005a      	lsls	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	3b01      	subs	r3, #1
 8002198:	035a      	lsls	r2, r3, #13
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e007      	b.n	80021b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	051a      	lsls	r2, r3, #20
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f6:	025a      	lsls	r2, r3, #9
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	029a      	lsls	r2, r3, #10
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40012300 	.word	0x40012300
 8002234:	0f000001 	.word	0x0f000001

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff47 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff5c 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffb0 	bl	8002358 <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e159      	b.n	80026d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8148 	bne.w	80026ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a2 	beq.w	80026ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_GPIO_Init+0x2ec>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	; (80026f4 <HAL_GPIO_Init+0x2f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x202>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_GPIO_Init+0x2f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x1fe>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_GPIO_Init+0x2f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x1fa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x1f6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	; (8002704 <HAL_GPIO_Init+0x300>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x1f2>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	; (80026f0 <HAL_GPIO_Init+0x2ec>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_GPIO_Init+0x304>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f aea2 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e267      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b82      	ldr	r3, [pc, #520]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b7e      	ldr	r3, [pc, #504]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e242      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x74>
 80027a6:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b70      	ldr	r3, [pc, #448]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6f      	ldr	r2, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6c      	ldr	r2, [pc, #432]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027d8:	4b69      	ldr	r3, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a68      	ldr	r2, [pc, #416]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fa7c 	bl	8001cf4 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7ff fa78 	bl	8001cf4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e207      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xc0>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff fa68 	bl	8001cf4 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7ff fa64 	bl	8001cf4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1f3      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0xe8>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1c7      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x244>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7ff fa1d 	bl	8001cf4 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff fa19 	bl	8001cf4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1a8      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x244>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff f9fc 	bl	8001cf4 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7ff f9f8 	bl	8001cf4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e187      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x248>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7ff f9dc 	bl	8001cf4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7ff f9d8 	bl	8001cf4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e167      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x240>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x200>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_OscConfig+0x248>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7ff f9c5 	bl	8001cf4 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7ff f9c1 	bl	8001cf4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e150      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b88      	ldr	r3, [pc, #544]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7d      	ldr	r3, [pc, #500]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a7c      	ldr	r2, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b7a      	ldr	r3, [pc, #488]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7ff f981 	bl	8001cf4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7ff f97d 	bl	8001cf4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e10c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x474>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
 8002a1c:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a63      	ldr	r2, [pc, #396]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x30c>
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a5e      	ldr	r2, [pc, #376]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a5b      	ldr	r2, [pc, #364]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a4c:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a54      	ldr	r2, [pc, #336]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff f942 	bl	8001cf4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7ff f93e 	bl	8001cf4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0cb      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x334>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7ff f92c 	bl	8001cf4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f928 	bl	8001cf4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0b5      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a1 	beq.w	8002c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d05c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d141      	bne.n	8002b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff f8fc 	bl	8001cf4 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7ff f8f8 	bl	8001cf4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e087      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	491b      	ldr	r1, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff f8d1 	bl	8001cf4 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7ff f8cd 	bl	8001cf4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e05c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x416>
 8002b74:	e054      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f8ba 	bl	8001cf4 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b84:	f7ff f8b6 	bl	8001cf4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e045      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x444>
 8002ba2:	e03d      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e038      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d121      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0cc      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d90c      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d044      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e067      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4934      	ldr	r1, [pc, #208]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fe ffe8 	bl	8001cf4 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe ffe4 	bl	8001cf4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e04f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d20c      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe ff48 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023c00 	.word	0x40023c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	0800457c 	.word	0x0800457c
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e00:	b090      	sub	sp, #64	; 0x40
 8002e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
 8002e08:	2300      	movs	r3, #0
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d00d      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x40>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	f200 80a1 	bhi.w	8002f68 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e2e:	e09b      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e34:	e09b      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e36:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e3a:	e098      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e46:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d028      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e64:	2100      	movs	r1, #0
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e68:	fb03 f201 	mul.w	r2, r3, r1
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	fb00 f303 	mul.w	r3, r0, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	4a43      	ldr	r2, [pc, #268]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e76:	fba0 1202 	umull	r1, r2, r0, r2
 8002e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e82:	4413      	add	r3, r2
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	61fa      	str	r2, [r7, #28]
 8002e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e96:	f7fd f99f 	bl	80001d8 <__aeabi_uldivmod>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea2:	e053      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea4:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	2200      	movs	r2, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	617a      	str	r2, [r7, #20]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eb6:	f04f 0b00 	mov.w	fp, #0
 8002eba:	4652      	mov	r2, sl
 8002ebc:	465b      	mov	r3, fp
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	0159      	lsls	r1, r3, #5
 8002ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ecc:	0150      	lsls	r0, r2, #5
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ed6:	eb63 090b 	sbc.w	r9, r3, fp
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ee6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eee:	ebb2 0408 	subs.w	r4, r2, r8
 8002ef2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	00eb      	lsls	r3, r5, #3
 8002f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f04:	00e2      	lsls	r2, r4, #3
 8002f06:	4614      	mov	r4, r2
 8002f08:	461d      	mov	r5, r3
 8002f0a:	eb14 030a 	adds.w	r3, r4, sl
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	eb45 030b 	adc.w	r3, r5, fp
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f22:	4629      	mov	r1, r5
 8002f24:	028b      	lsls	r3, r1, #10
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	028a      	lsls	r2, r1, #10
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	2200      	movs	r2, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	60fa      	str	r2, [r7, #12]
 8002f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f40:	f7fd f94a 	bl	80001d8 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	3301      	adds	r3, #1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f66:	e002      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3740      	adds	r7, #64	; 0x40
 8002f74:	46bd      	mov	sp, r7
 8002f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	017d7840 	.word	0x017d7840

08002f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07b      	b.n	8003092 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002faa:	d009      	beq.n	8002fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
 8002fb2:	e005      	b.n	8002fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fd76 	bl	8001acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	ea42 0103 	orr.w	r1, r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0104 	and.w	r1, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f003 0210 	and.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b088      	sub	sp, #32
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_SPI_Transmit+0x22>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e126      	b.n	800330a <HAL_SPI_Transmit+0x270>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030c4:	f7fe fe16 	bl	8001cf4 <HAL_GetTick>
 80030c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030de:	e10b      	b.n	80032f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_SPI_Transmit+0x52>
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030f0:	e102      	b.n	80032f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2203      	movs	r2, #3
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d10f      	bne.n	800315a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003158:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d007      	beq.n	8003178 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003180:	d14b      	bne.n	800321a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_SPI_Transmit+0xf6>
 800318a:	8afb      	ldrh	r3, [r7, #22]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d13e      	bne.n	800320e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b4:	e02b      	b.n	800320e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d112      	bne.n	80031ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	881a      	ldrh	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80031e8:	e011      	b.n	800320e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ea:	f7fe fd83 	bl	8001cf4 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d803      	bhi.n	8003202 <HAL_SPI_Transmit+0x168>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d102      	bne.n	8003208 <HAL_SPI_Transmit+0x16e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800320c:	e074      	b.n	80032f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ce      	bne.n	80031b6 <HAL_SPI_Transmit+0x11c>
 8003218:	e04c      	b.n	80032b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_SPI_Transmit+0x18e>
 8003222:	8afb      	ldrh	r3, [r7, #22]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d140      	bne.n	80032aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	7812      	ldrb	r2, [r2, #0]
 8003234:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800324e:	e02c      	b.n	80032aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b02      	cmp	r3, #2
 800325c:	d113      	bne.n	8003286 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	86da      	strh	r2, [r3, #54]	; 0x36
 8003284:	e011      	b.n	80032aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003286:	f7fe fd35 	bl	8001cf4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d803      	bhi.n	800329e <HAL_SPI_Transmit+0x204>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d102      	bne.n	80032a4 <HAL_SPI_Transmit+0x20a>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032a8:	e026      	b.n	80032f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1cd      	bne.n	8003250 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fa55 	bl	8003768 <SPI_EndRxTxTransaction>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e000      	b.n	80032f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80032f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003308:	7ffb      	ldrb	r3, [r7, #31]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b08c      	sub	sp, #48	; 0x30
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003320:	2301      	movs	r3, #1
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x26>
 8003334:	2302      	movs	r3, #2
 8003336:	e18a      	b.n	800364e <HAL_SPI_TransmitReceive+0x33c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003340:	f7fe fcd8 	bl	8001cf4 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800334c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800335a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800335e:	2b01      	cmp	r3, #1
 8003360:	d00f      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x70>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003368:	d107      	bne.n	800337a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_SPI_TransmitReceive+0x68>
 8003372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003380:	e15b      	b.n	800363a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x82>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x82>
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800339a:	e14e      	b.n	800363a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d003      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2205      	movs	r2, #5
 80033ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	887a      	ldrh	r2, [r7, #2]
 80033c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d007      	beq.n	8003404 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340c:	d178      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_TransmitReceive+0x10a>
 8003416:	8b7b      	ldrh	r3, [r7, #26]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d166      	bne.n	80034ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003440:	e053      	b.n	80034ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11b      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x176>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x176>
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d113      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d119      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x1b8>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d014      	beq.n	80034ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	b292      	uxth	r2, r2
 80034ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034c6:	2301      	movs	r3, #1
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034ca:	f7fe fc13 	bl	8001cf4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d807      	bhi.n	80034ea <HAL_SPI_TransmitReceive+0x1d8>
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d003      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034e8:	e0a7      	b.n	800363a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1a6      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x130>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1a1      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x130>
 80034fe:	e07c      	b.n	80035fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_SPI_TransmitReceive+0x1fc>
 8003508:	8b7b      	ldrh	r3, [r7, #26]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d16b      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003534:	e057      	b.n	80035e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d11c      	bne.n	800357e <HAL_SPI_TransmitReceive+0x26c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <HAL_SPI_TransmitReceive+0x26c>
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d114      	bne.n	800357e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d119      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x2ae>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d014      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035bc:	2301      	movs	r3, #1
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035c0:	f7fe fb98 	bl	8001cf4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d803      	bhi.n	80035d8 <HAL_SPI_TransmitReceive+0x2c6>
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d102      	bne.n	80035de <HAL_SPI_TransmitReceive+0x2cc>
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035e4:	e029      	b.n	800363a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1a2      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x224>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d19d      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8b2 	bl	8003768 <SPI_EndRxTxTransaction>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003616:	e010      	b.n	800363a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	e000      	b.n	800363a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003638:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800364a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800364e:	4618      	mov	r0, r3
 8003650:	3730      	adds	r7, #48	; 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003668:	f7fe fb44 	bl	8001cf4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	4413      	add	r3, r2
 8003676:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003678:	f7fe fb3c 	bl	8001cf4 <HAL_GetTick>
 800367c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800367e:	4b39      	ldr	r3, [pc, #228]	; (8003764 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	015b      	lsls	r3, r3, #5
 8003684:	0d1b      	lsrs	r3, r3, #20
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368e:	e054      	b.n	800373a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d050      	beq.n	800373a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003698:	f7fe fb2c 	bl	8001cf4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d902      	bls.n	80036ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d13d      	bne.n	800372a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c6:	d111      	bne.n	80036ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d0:	d004      	beq.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d107      	bne.n	80036ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f4:	d10f      	bne.n	8003716 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003714:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e017      	b.n	800375a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	3b01      	subs	r3, #1
 8003738:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	bf0c      	ite	eq
 800374a:	2301      	moveq	r3, #1
 800374c:	2300      	movne	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	429a      	cmp	r2, r3
 8003756:	d19b      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000

08003768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <SPI_EndRxTxTransaction+0x7c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <SPI_EndRxTxTransaction+0x80>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0d5b      	lsrs	r3, r3, #21
 8003780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003792:	d112      	bne.n	80037ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2200      	movs	r2, #0
 800379c:	2180      	movs	r1, #128	; 0x80
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff ff5a 	bl	8003658 <SPI_WaitFlagStateUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e00f      	b.n	80037da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d0f2      	beq.n	80037ba <SPI_EndRxTxTransaction+0x52>
 80037d4:	e000      	b.n	80037d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80037d6:	bf00      	nop
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000000 	.word	0x20000000
 80037e8:	165e9f81 	.word	0x165e9f81

080037ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80037f0:	4904      	ldr	r1, [pc, #16]	; (8003804 <MX_FATFS_Init+0x18>)
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <MX_FATFS_Init+0x1c>)
 80037f4:	f000 fd7a 	bl	80042ec <FATFS_LinkDriver>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <MX_FATFS_Init+0x20>)
 80037fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}
 8003804:	200096e8 	.word	0x200096e8
 8003808:	2000000c 	.word	0x2000000c
 800380c:	200096e4 	.word	0x200096e4

08003810 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f9c5 	bl	8003bac <USER_SPI_initialize>
 8003822:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 faa3 	bl	8003d84 <USER_SPI_status>
 800383e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003858:	7bf8      	ldrb	r0, [r7, #15]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	f000 faa6 	bl	8003db0 <USER_SPI_read>
 8003864:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800387e:	7bf8      	ldrb	r0, [r7, #15]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	f000 faf9 	bl	8003e7c <USER_SPI_write>
 800388a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	603a      	str	r2, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
 80038a0:	460b      	mov	r3, r1
 80038a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80038a4:	79b9      	ldrb	r1, [r7, #6]
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fb62 	bl	8003f74 <USER_SPI_ioctl>
 80038b0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80038c4:	f7fe fa16 	bl	8001cf4 <HAL_GetTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <SPI_Timer_On+0x20>)
 80038cc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <SPI_Timer_On+0x24>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200096f0 	.word	0x200096f0
 80038e0:	200096f4 	.word	0x200096f4

080038e4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80038e8:	f7fe fa04 	bl	8001cf4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <SPI_Timer_Status+0x24>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1ad2      	subs	r2, r2, r3
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <SPI_Timer_Status+0x28>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bf34      	ite	cc
 80038fc:	2301      	movcc	r3, #1
 80038fe:	2300      	movcs	r3, #0
 8003900:	b2db      	uxtb	r3, r3
}
 8003902:	4618      	mov	r0, r3
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200096f0 	.word	0x200096f0
 800390c:	200096f4 	.word	0x200096f4

08003910 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800391a:	f107 020f 	add.w	r2, r7, #15
 800391e:	1df9      	adds	r1, r7, #7
 8003920:	2332      	movs	r3, #50	; 0x32
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2301      	movs	r3, #1
 8003926:	4804      	ldr	r0, [pc, #16]	; (8003938 <xchg_spi+0x28>)
 8003928:	f7ff fcf3 	bl	8003312 <HAL_SPI_TransmitReceive>
    return rxDat;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20009688 	.word	0x20009688

0800393c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e00a      	b.n	8003962 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	18d4      	adds	r4, r2, r3
 8003952:	20ff      	movs	r0, #255	; 0xff
 8003954:	f7ff ffdc 	bl	8003910 <xchg_spi>
 8003958:	4603      	mov	r3, r0
 800395a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3f0      	bcc.n	800394c <rcvr_spi_multi+0x10>
	}
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}

08003974 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (BYTE *) buff, btx, HAL_MAX_DELAY);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b29a      	uxth	r2, r3
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4803      	ldr	r0, [pc, #12]	; (8003998 <xmit_spi_multi+0x24>)
 800398a:	f7ff fb86 	bl	800309a <HAL_SPI_Transmit>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20009688 	.word	0x20009688

0800399c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80039a4:	f7fe f9a6 	bl	8001cf4 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80039ae:	20ff      	movs	r0, #255	; 0xff
 80039b0:	f7ff ffae 	bl	8003910 <xchg_spi>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2bff      	cmp	r3, #255	; 0xff
 80039bc:	d007      	beq.n	80039ce <wait_ready+0x32>
 80039be:	f7fe f999 	bl	8001cf4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d8ef      	bhi.n	80039ae <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2bff      	cmp	r3, #255	; 0xff
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80039e6:	20ff      	movs	r0, #255	; 0xff
 80039e8:	f7ff ff92 	bl	8003910 <xchg_spi>

}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80039f4:	20ff      	movs	r0, #255	; 0xff
 80039f6:	f7ff ff8b 	bl	8003910 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80039fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039fe:	f7ff ffcd 	bl	800399c <wait_ready>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <spiselect+0x1c>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e002      	b.n	8003a12 <spiselect+0x22>

	despiselect();
 8003a0c:	f7ff ffe9 	bl	80039e2 <despiselect>
	return 0;	/* Timeout */
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003a20:	20c8      	movs	r0, #200	; 0xc8
 8003a22:	f7ff ff4b 	bl	80038bc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003a26:	20ff      	movs	r0, #255	; 0xff
 8003a28:	f7ff ff72 	bl	8003910 <xchg_spi>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2bff      	cmp	r3, #255	; 0xff
 8003a34:	d104      	bne.n	8003a40 <rcvr_datablock+0x2a>
 8003a36:	f7ff ff55 	bl	80038e4 <SPI_Timer_Status>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f2      	bne.n	8003a26 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2bfe      	cmp	r3, #254	; 0xfe
 8003a44:	d001      	beq.n	8003a4a <rcvr_datablock+0x34>
 8003a46:	2300      	movs	r3, #0
 8003a48:	e00a      	b.n	8003a60 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a4a:	6839      	ldr	r1, [r7, #0]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff75 	bl	800393c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003a52:	20ff      	movs	r0, #255	; 0xff
 8003a54:	f7ff ff5c 	bl	8003910 <xchg_spi>
 8003a58:	20ff      	movs	r0, #255	; 0xff
 8003a5a:	f7ff ff59 	bl	8003910 <xchg_spi>

	return 1;						/* Function succeeded */
 8003a5e:	2301      	movs	r3, #1
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a78:	f7ff ff90 	bl	800399c <wait_ready>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <xmit_datablock+0x1e>
 8003a82:	2300      	movs	r3, #0
 8003a84:	e01e      	b.n	8003ac4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff41 	bl	8003910 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	2bfd      	cmp	r3, #253	; 0xfd
 8003a92:	d016      	beq.n	8003ac2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff6b 	bl	8003974 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003a9e:	20ff      	movs	r0, #255	; 0xff
 8003aa0:	f7ff ff36 	bl	8003910 <xchg_spi>
 8003aa4:	20ff      	movs	r0, #255	; 0xff
 8003aa6:	f7ff ff33 	bl	8003910 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003aaa:	20ff      	movs	r0, #255	; 0xff
 8003aac:	f7ff ff30 	bl	8003910 <xchg_spi>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d001      	beq.n	8003ac2 <xmit_datablock+0x5a>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <xmit_datablock+0x5c>
	}
	return 1;
 8003ac2:	2301      	movs	r3, #1
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da0e      	bge.n	8003afe <send_cmd+0x32>
		cmd &= 0x7F;
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	2037      	movs	r0, #55	; 0x37
 8003aec:	f7ff ffee 	bl	8003acc <send_cmd>
 8003af0:	4603      	mov	r3, r0
 8003af2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d901      	bls.n	8003afe <send_cmd+0x32>
 8003afa:	7bbb      	ldrb	r3, [r7, #14]
 8003afc:	e051      	b.n	8003ba2 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d008      	beq.n	8003b16 <send_cmd+0x4a>
		despiselect();
 8003b04:	f7ff ff6d 	bl	80039e2 <despiselect>
		if (!spiselect()) return 0xFF;
 8003b08:	f7ff ff72 	bl	80039f0 <spiselect>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <send_cmd+0x4a>
 8003b12:	23ff      	movs	r3, #255	; 0xff
 8003b14:	e045      	b.n	8003ba2 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fef6 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	0e1b      	lsrs	r3, r3, #24
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fef0 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff feea 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fee4 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fedf 	bl	8003910 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <send_cmd+0x94>
 8003b5c:	2395      	movs	r3, #149	; 0x95
 8003b5e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d101      	bne.n	8003b6a <send_cmd+0x9e>
 8003b66:	2387      	movs	r3, #135	; 0x87
 8003b68:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fecf 	bl	8003910 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d102      	bne.n	8003b7e <send_cmd+0xb2>
 8003b78:	20ff      	movs	r0, #255	; 0xff
 8003b7a:	f7ff fec9 	bl	8003910 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003b7e:	230a      	movs	r3, #10
 8003b80:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003b82:	20ff      	movs	r0, #255	; 0xff
 8003b84:	f7ff fec4 	bl	8003910 <xchg_spi>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da05      	bge.n	8003ba0 <send_cmd+0xd4>
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <USER_SPI_initialize+0x14>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0d6      	b.n	8003d6e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003bc0:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <USER_SPI_initialize+0x1cc>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <USER_SPI_initialize+0x2a>
 8003bce:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <USER_SPI_initialize+0x1cc>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e0cb      	b.n	8003d6e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003bd6:	4b69      	ldr	r3, [pc, #420]	; (8003d7c <USER_SPI_initialize+0x1d0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <USER_SPI_initialize+0x1d0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003be8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003bea:	230a      	movs	r3, #10
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	e005      	b.n	8003bfc <USER_SPI_initialize+0x50>
 8003bf0:	20ff      	movs	r0, #255	; 0xff
 8003bf2:	f7ff fe8d 	bl	8003910 <xchg_spi>
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f6      	bne.n	8003bf0 <USER_SPI_initialize+0x44>

	ty = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003c06:	2100      	movs	r1, #0
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7ff ff5f 	bl	8003acc <send_cmd>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 808b 	bne.w	8003d2c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c1a:	f7ff fe4f 	bl	80038bc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003c1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c22:	2008      	movs	r0, #8
 8003c24:	f7ff ff52 	bl	8003acc <send_cmd>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d151      	bne.n	8003cd2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e00d      	b.n	8003c50 <USER_SPI_initialize+0xa4>
 8003c34:	7bfc      	ldrb	r4, [r7, #15]
 8003c36:	20ff      	movs	r0, #255	; 0xff
 8003c38:	f7ff fe6a 	bl	8003910 <xchg_spi>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f104 0310 	add.w	r3, r4, #16
 8003c44:	443b      	add	r3, r7
 8003c46:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d9ee      	bls.n	8003c34 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003c56:	7abb      	ldrb	r3, [r7, #10]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d167      	bne.n	8003d2c <USER_SPI_initialize+0x180>
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	2baa      	cmp	r3, #170	; 0xaa
 8003c60:	d164      	bne.n	8003d2c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003c62:	bf00      	nop
 8003c64:	f7ff fe3e 	bl	80038e4 <SPI_Timer_Status>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <USER_SPI_initialize+0xd2>
 8003c6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c72:	20a9      	movs	r0, #169	; 0xa9
 8003c74:	f7ff ff2a 	bl	8003acc <send_cmd>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f2      	bne.n	8003c64 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003c7e:	f7ff fe31 	bl	80038e4 <SPI_Timer_Status>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d051      	beq.n	8003d2c <USER_SPI_initialize+0x180>
 8003c88:	2100      	movs	r1, #0
 8003c8a:	203a      	movs	r0, #58	; 0x3a
 8003c8c:	f7ff ff1e 	bl	8003acc <send_cmd>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d14a      	bne.n	8003d2c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	e00d      	b.n	8003cb8 <USER_SPI_initialize+0x10c>
 8003c9c:	7bfc      	ldrb	r4, [r7, #15]
 8003c9e:	20ff      	movs	r0, #255	; 0xff
 8003ca0:	f7ff fe36 	bl	8003910 <xchg_spi>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f104 0310 	add.w	r3, r4, #16
 8003cac:	443b      	add	r3, r7
 8003cae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d9ee      	bls.n	8003c9c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003cbe:	7a3b      	ldrb	r3, [r7, #8]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <USER_SPI_initialize+0x120>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	e000      	b.n	8003cce <USER_SPI_initialize+0x122>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	737b      	strb	r3, [r7, #13]
 8003cd0:	e02c      	b.n	8003d2c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	20a9      	movs	r0, #169	; 0xa9
 8003cd6:	f7ff fef9 	bl	8003acc <send_cmd>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d804      	bhi.n	8003cea <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	737b      	strb	r3, [r7, #13]
 8003ce4:	23a9      	movs	r3, #169	; 0xa9
 8003ce6:	73bb      	strb	r3, [r7, #14]
 8003ce8:	e003      	b.n	8003cf2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003cea:	2301      	movs	r3, #1
 8003cec:	737b      	strb	r3, [r7, #13]
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003cf2:	bf00      	nop
 8003cf4:	f7ff fdf6 	bl	80038e4 <SPI_Timer_Status>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <USER_SPI_initialize+0x162>
 8003cfe:	7bbb      	ldrb	r3, [r7, #14]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fee2 	bl	8003acc <send_cmd>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f2      	bne.n	8003cf4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003d0e:	f7ff fde9 	bl	80038e4 <SPI_Timer_Status>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <USER_SPI_initialize+0x17c>
 8003d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d1c:	2010      	movs	r0, #16
 8003d1e:	f7ff fed5 	bl	8003acc <send_cmd>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <USER_SPI_initialize+0x180>
				ty = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <USER_SPI_initialize+0x1d4>)
 8003d2e:	7b7b      	ldrb	r3, [r7, #13]
 8003d30:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003d32:	f7ff fe56 	bl	80039e2 <despiselect>

	if (ty) {			/* OK */
 8003d36:	7b7b      	ldrb	r3, [r7, #13]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <USER_SPI_initialize+0x1d0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <USER_SPI_initialize+0x1d0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0210 	orr.w	r2, r2, #16
 8003d4e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <USER_SPI_initialize+0x1cc>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <USER_SPI_initialize+0x1cc>)
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e002      	b.n	8003d68 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <USER_SPI_initialize+0x1cc>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <USER_SPI_initialize+0x1cc>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd90      	pop	{r4, r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000020 	.word	0x20000020
 8003d7c:	20009688 	.word	0x20009688
 8003d80:	200096ec 	.word	0x200096ec

08003d84 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <USER_SPI_status+0x14>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e002      	b.n	8003d9e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <USER_SPI_status+0x28>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000020 	.word	0x20000020

08003db0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <USER_SPI_read+0x1c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <USER_SPI_read+0x20>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	e04d      	b.n	8003e6c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <USER_SPI_read+0xc4>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <USER_SPI_read+0x32>
 8003dde:	2303      	movs	r3, #3
 8003de0:	e044      	b.n	8003e6c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003de2:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <USER_SPI_read+0xc8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <USER_SPI_read+0x44>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	025b      	lsls	r3, r3, #9
 8003df2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d111      	bne.n	8003e1e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	2011      	movs	r0, #17
 8003dfe:	f7ff fe65 	bl	8003acc <send_cmd>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d129      	bne.n	8003e5c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e0c:	68b8      	ldr	r0, [r7, #8]
 8003e0e:	f7ff fe02 	bl	8003a16 <rcvr_datablock>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d021      	beq.n	8003e5c <USER_SPI_read+0xac>
			count = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	e01e      	b.n	8003e5c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	2012      	movs	r0, #18
 8003e22:	f7ff fe53 	bl	8003acc <send_cmd>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d117      	bne.n	8003e5c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e30:	68b8      	ldr	r0, [r7, #8]
 8003e32:	f7ff fdf0 	bl	8003a16 <rcvr_datablock>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <USER_SPI_read+0xa2>
				buff += 512;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e42:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ed      	bne.n	8003e2c <USER_SPI_read+0x7c>
 8003e50:	e000      	b.n	8003e54 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003e52:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003e54:	2100      	movs	r1, #0
 8003e56:	200c      	movs	r0, #12
 8003e58:	f7ff fe38 	bl	8003acc <send_cmd>
		}
	}
	despiselect();
 8003e5c:	f7ff fdc1 	bl	80039e2 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000020 	.word	0x20000020
 8003e78:	200096ec 	.word	0x200096ec

08003e7c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d102      	bne.n	8003e98 <USER_SPI_write+0x1c>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <USER_SPI_write+0x20>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e063      	b.n	8003f64 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <USER_SPI_write+0xf0>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <USER_SPI_write+0x32>
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e05a      	b.n	8003f64 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <USER_SPI_write+0xf0>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <USER_SPI_write+0x44>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e051      	b.n	8003f64 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <USER_SPI_write+0xf4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <USER_SPI_write+0x56>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	025b      	lsls	r3, r3, #9
 8003ed0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d110      	bne.n	8003efa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	2018      	movs	r0, #24
 8003edc:	f7ff fdf6 	bl	8003acc <send_cmd>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d136      	bne.n	8003f54 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003ee6:	21fe      	movs	r1, #254	; 0xfe
 8003ee8:	68b8      	ldr	r0, [r7, #8]
 8003eea:	f7ff fdbd 	bl	8003a68 <xmit_datablock>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d02f      	beq.n	8003f54 <USER_SPI_write+0xd8>
			count = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	e02c      	b.n	8003f54 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <USER_SPI_write+0xf4>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	f003 0306 	and.w	r3, r3, #6
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <USER_SPI_write+0x92>
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	2097      	movs	r0, #151	; 0x97
 8003f0a:	f7ff fddf 	bl	8003acc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	2019      	movs	r0, #25
 8003f12:	f7ff fddb 	bl	8003acc <send_cmd>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11b      	bne.n	8003f54 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f1c:	21fc      	movs	r1, #252	; 0xfc
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f7ff fda2 	bl	8003a68 <xmit_datablock>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <USER_SPI_write+0xc4>
				buff += 512;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ee      	bne.n	8003f1c <USER_SPI_write+0xa0>
 8003f3e:	e000      	b.n	8003f42 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f40:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003f42:	21fd      	movs	r1, #253	; 0xfd
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7ff fd8f 	bl	8003a68 <xmit_datablock>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <USER_SPI_write+0xd8>
 8003f50:	2301      	movs	r3, #1
 8003f52:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003f54:	f7ff fd45 	bl	80039e2 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000020 	.word	0x20000020
 8003f70:	200096ec 	.word	0x200096ec

08003f74 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	; 0x30
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	603a      	str	r2, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	460b      	mov	r3, r1
 8003f82:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <USER_SPI_ioctl+0x1a>
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	e15a      	b.n	8004244 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f8e:	4baf      	ldr	r3, [pc, #700]	; (800424c <USER_SPI_ioctl+0x2d8>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <USER_SPI_ioctl+0x2c>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e151      	b.n	8004244 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003fa6:	79bb      	ldrb	r3, [r7, #6]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	f200 8136 	bhi.w	800421a <USER_SPI_ioctl+0x2a6>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <USER_SPI_ioctl+0x40>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fc9 	.word	0x08003fc9
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	0800421b 	.word	0x0800421b
 8003fc0:	08004089 	.word	0x08004089
 8003fc4:	0800417f 	.word	0x0800417f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003fc8:	f7ff fd12 	bl	80039f0 <spiselect>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8127 	beq.w	8004222 <USER_SPI_ioctl+0x2ae>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003fda:	e122      	b.n	8004222 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003fdc:	2100      	movs	r1, #0
 8003fde:	2009      	movs	r0, #9
 8003fe0:	f7ff fd74 	bl	8003acc <send_cmd>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 811d 	bne.w	8004226 <USER_SPI_ioctl+0x2b2>
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	2110      	movs	r1, #16
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fd0f 	bl	8003a16 <rcvr_datablock>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8113 	beq.w	8004226 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004000:	7b3b      	ldrb	r3, [r7, #12]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d111      	bne.n	800402e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800400a:	7d7b      	ldrb	r3, [r7, #21]
 800400c:	461a      	mov	r2, r3
 800400e:	7d3b      	ldrb	r3, [r7, #20]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	4413      	add	r3, r2
 8004014:	461a      	mov	r2, r3
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800401e:	4413      	add	r3, r2
 8004020:	3301      	adds	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	029a      	lsls	r2, r3, #10
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e028      	b.n	8004080 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800402e:	7c7b      	ldrb	r3, [r7, #17]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	b2da      	uxtb	r2, r3
 8004036:	7dbb      	ldrb	r3, [r7, #22]
 8004038:	09db      	lsrs	r3, r3, #7
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4413      	add	r3, r2
 800403e:	b2da      	uxtb	r2, r3
 8004040:	7d7b      	ldrb	r3, [r7, #21]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4413      	add	r3, r2
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3302      	adds	r3, #2
 8004052:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004056:	7d3b      	ldrb	r3, [r7, #20]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	7cbb      	ldrb	r3, [r7, #18]
 8004066:	029b      	lsls	r3, r3, #10
 8004068:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800406c:	4413      	add	r3, r2
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004072:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004076:	3b09      	subs	r3, #9
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	409a      	lsls	r2, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004086:	e0ce      	b.n	8004226 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004088:	4b71      	ldr	r3, [pc, #452]	; (8004250 <USER_SPI_ioctl+0x2dc>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d031      	beq.n	80040f8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004094:	2100      	movs	r1, #0
 8004096:	208d      	movs	r0, #141	; 0x8d
 8004098:	f7ff fd18 	bl	8003acc <send_cmd>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 80c3 	bne.w	800422a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80040a4:	20ff      	movs	r0, #255	; 0xff
 80040a6:	f7ff fc33 	bl	8003910 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80040aa:	f107 030c 	add.w	r3, r7, #12
 80040ae:	2110      	movs	r1, #16
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fcb0 	bl	8003a16 <rcvr_datablock>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80b6 	beq.w	800422a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80040be:	2330      	movs	r3, #48	; 0x30
 80040c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80040c4:	e007      	b.n	80040d6 <USER_SPI_ioctl+0x162>
 80040c6:	20ff      	movs	r0, #255	; 0xff
 80040c8:	f7ff fc22 	bl	8003910 <xchg_spi>
 80040cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040d0:	3b01      	subs	r3, #1
 80040d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80040d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f3      	bne.n	80040c6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	2310      	movs	r3, #16
 80040e8:	fa03 f202 	lsl.w	r2, r3, r2
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80040f6:	e098      	b.n	800422a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80040f8:	2100      	movs	r1, #0
 80040fa:	2009      	movs	r0, #9
 80040fc:	f7ff fce6 	bl	8003acc <send_cmd>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 8091 	bne.w	800422a <USER_SPI_ioctl+0x2b6>
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	2110      	movs	r1, #16
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fc81 	bl	8003a16 <rcvr_datablock>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8087 	beq.w	800422a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800411c:	4b4c      	ldr	r3, [pc, #304]	; (8004250 <USER_SPI_ioctl+0x2dc>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004128:	7dbb      	ldrb	r3, [r7, #22]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004130:	7dfa      	ldrb	r2, [r7, #23]
 8004132:	09d2      	lsrs	r2, r2, #7
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	4413      	add	r3, r2
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	7e7b      	ldrb	r3, [r7, #25]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	461a      	mov	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e013      	b.n	8004176 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800414e:	7dbb      	ldrb	r3, [r7, #22]
 8004150:	109b      	asrs	r3, r3, #2
 8004152:	b29b      	uxth	r3, r3
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	3301      	adds	r3, #1
 800415a:	7dfa      	ldrb	r2, [r7, #23]
 800415c:	00d2      	lsls	r2, r2, #3
 800415e:	f002 0218 	and.w	r2, r2, #24
 8004162:	7df9      	ldrb	r1, [r7, #23]
 8004164:	0949      	lsrs	r1, r1, #5
 8004166:	b2c9      	uxtb	r1, r1
 8004168:	440a      	add	r2, r1
 800416a:	3201      	adds	r2, #1
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	461a      	mov	r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800417c:	e055      	b.n	800422a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800417e:	4b34      	ldr	r3, [pc, #208]	; (8004250 <USER_SPI_ioctl+0x2dc>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	f003 0306 	and.w	r3, r3, #6
 8004186:	2b00      	cmp	r3, #0
 8004188:	d051      	beq.n	800422e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800418a:	f107 020c 	add.w	r2, r7, #12
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	210b      	movs	r1, #11
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff feee 	bl	8003f74 <USER_SPI_ioctl>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d149      	bne.n	8004232 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800419e:	7b3b      	ldrb	r3, [r7, #12]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <USER_SPI_ioctl+0x23e>
 80041a8:	7dbb      	ldrb	r3, [r7, #22]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d041      	beq.n	8004236 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	623b      	str	r3, [r7, #32]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <USER_SPI_ioctl+0x2dc>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	025b      	lsls	r3, r3, #9
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	025b      	lsls	r3, r3, #9
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80041da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041dc:	2020      	movs	r0, #32
 80041de:	f7ff fc75 	bl	8003acc <send_cmd>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d128      	bne.n	800423a <USER_SPI_ioctl+0x2c6>
 80041e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ea:	2021      	movs	r0, #33	; 0x21
 80041ec:	f7ff fc6e 	bl	8003acc <send_cmd>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d121      	bne.n	800423a <USER_SPI_ioctl+0x2c6>
 80041f6:	2100      	movs	r1, #0
 80041f8:	2026      	movs	r0, #38	; 0x26
 80041fa:	f7ff fc67 	bl	8003acc <send_cmd>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d11a      	bne.n	800423a <USER_SPI_ioctl+0x2c6>
 8004204:	f247 5030 	movw	r0, #30000	; 0x7530
 8004208:	f7ff fbc8 	bl	800399c <wait_ready>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d013      	beq.n	800423a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004212:	2300      	movs	r3, #0
 8004214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004218:	e00f      	b.n	800423a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800421a:	2304      	movs	r3, #4
 800421c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004220:	e00c      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		break;
 8004222:	bf00      	nop
 8004224:	e00a      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		break;
 8004226:	bf00      	nop
 8004228:	e008      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		break;
 800422a:	bf00      	nop
 800422c:	e006      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800422e:	bf00      	nop
 8004230:	e004      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <USER_SPI_ioctl+0x2c8>
		break;
 800423a:	bf00      	nop
	}

	despiselect();
 800423c:	f7ff fbd1 	bl	80039e2 <despiselect>

	return res;
 8004240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004244:	4618      	mov	r0, r3
 8004246:	3730      	adds	r7, #48	; 0x30
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000020 	.word	0x20000020
 8004250:	200096ec 	.word	0x200096ec

08004254 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800426a:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 800426c:	7a5b      	ldrb	r3, [r3, #9]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d131      	bne.n	80042d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 8004276:	7a5b      	ldrb	r3, [r3, #9]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 800427e:	2100      	movs	r1, #0
 8004280:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 8004284:	7a5b      	ldrb	r3, [r3, #9]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 8004294:	7a5b      	ldrb	r3, [r3, #9]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 800429c:	4413      	add	r3, r2
 800429e:	79fa      	ldrb	r2, [r7, #7]
 80042a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 80042a4:	7a5b      	ldrb	r3, [r3, #9]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	b2d1      	uxtb	r1, r2
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <FATFS_LinkDriverEx+0x94>)
 80042ae:	7251      	strb	r1, [r2, #9]
 80042b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80042b2:	7dbb      	ldrb	r3, [r7, #22]
 80042b4:	3330      	adds	r3, #48	; 0x30
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3301      	adds	r3, #1
 80042c0:	223a      	movs	r2, #58	; 0x3a
 80042c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3302      	adds	r3, #2
 80042c8:	222f      	movs	r2, #47	; 0x2f
 80042ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	3303      	adds	r3, #3
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	200096f8 	.word	0x200096f8

080042ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ffaa 	bl	8004254 <FATFS_LinkDriverEx>
 8004300:	4603      	mov	r3, r0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <memset>:
 800430a:	4402      	add	r2, r0
 800430c:	4603      	mov	r3, r0
 800430e:	4293      	cmp	r3, r2
 8004310:	d100      	bne.n	8004314 <memset+0xa>
 8004312:	4770      	bx	lr
 8004314:	f803 1b01 	strb.w	r1, [r3], #1
 8004318:	e7f9      	b.n	800430e <memset+0x4>
	...

0800431c <__libc_init_array>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	4d0d      	ldr	r5, [pc, #52]	; (8004354 <__libc_init_array+0x38>)
 8004320:	4c0d      	ldr	r4, [pc, #52]	; (8004358 <__libc_init_array+0x3c>)
 8004322:	1b64      	subs	r4, r4, r5
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	2600      	movs	r6, #0
 8004328:	42a6      	cmp	r6, r4
 800432a:	d109      	bne.n	8004340 <__libc_init_array+0x24>
 800432c:	4d0b      	ldr	r5, [pc, #44]	; (800435c <__libc_init_array+0x40>)
 800432e:	4c0c      	ldr	r4, [pc, #48]	; (8004360 <__libc_init_array+0x44>)
 8004330:	f000 f818 	bl	8004364 <_init>
 8004334:	1b64      	subs	r4, r4, r5
 8004336:	10a4      	asrs	r4, r4, #2
 8004338:	2600      	movs	r6, #0
 800433a:	42a6      	cmp	r6, r4
 800433c:	d105      	bne.n	800434a <__libc_init_array+0x2e>
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	f855 3b04 	ldr.w	r3, [r5], #4
 8004344:	4798      	blx	r3
 8004346:	3601      	adds	r6, #1
 8004348:	e7ee      	b.n	8004328 <__libc_init_array+0xc>
 800434a:	f855 3b04 	ldr.w	r3, [r5], #4
 800434e:	4798      	blx	r3
 8004350:	3601      	adds	r6, #1
 8004352:	e7f2      	b.n	800433a <__libc_init_array+0x1e>
 8004354:	08004594 	.word	0x08004594
 8004358:	08004594 	.word	0x08004594
 800435c:	08004594 	.word	0x08004594
 8004360:	08004598 	.word	0x08004598

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
